{"version":3,"sources":["../bundle.js"],"names":["modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","webpackPolyfill","deprecate","paths","children","Neuron","ID","uid","connections","inputs","projected","gated","error","responsibility","trace","elegibility","extended","influences","state","old","activation","selfconnection","connection","squash","LOGISTIC","neighboors","bias","Math","random","activate","input","derivative","gain","weight","from","id","neuron","influence","gater","incoming","xtrace","propagate","rate","target","isOutput","to","gradient","project","connected","type","gate","push","selfconnected","result","clear","reset","optimize","optimized","layer","store_activation","store_trace","store_propagation","varID","memory","neurons","targets","outputs","variables","activation_sentences","trace_sentences","propagation_sentences","layers","__count","__neuron","allocate","store","allocated","currentLayer","getVar","args","Array","slice","arguments","length","value","pop","unit","shift","prop","buildSentence","sentence","isEmpty","obj","noProjections","noGates","isInput","self_gain","self_weight","input_activation","input_weight","input_gain","TANH","eP","eN","IDENTITY","HLIM","RELU","neuron_old","initialized","incoming_weight","incoming_activation","neuron_self_weight","neuron_self_gain","gated_gain","connection_weight","neuron_responsibility","connection_gain","neuron_activation","Connection","Error","x","derivate","fx","exp","pow","tanh","quantity","Layer","Network","size","list","connectedTo","activations","weights","gateType","INPUT","OUTPUT","ONE_TO_ONE","gatedfrom","here","there","connectionType","ALL_TO_ALL","add","set","options","label","LayerConnection","fromLayer","toLayer","ALL_TO_ELSE","Trainer","hidden","output","restore","inputLayer","outputLayer","that","reverse","hardcode","j","join","split","constructor","Function","network","data","check_activation","check_propagation","getValue","hiddenLayer","setOptimize","bool","toJSON","ignoreTraces","ids","copy","toDot","edgeConnection","code","concat","layerTo","layerID","indexOf","layerToID","fakeNode","layerfrom","layerfromID","link","escape","replace","standalone","match","dimension","tmp","substring","index","worker","workerOptions","iterations","cost","crossValidate","costFunction","MSE","workerFunction","getWorkerSharedFunctions","toString","JSON","stringify","workerSourceCode","blob","Blob","blobURL","window","URL","createObjectURL","Worker","clone","fromJSON","_SHARED_WORKER_FUNCTIONS","train_f","train","_trainSet_f","_trainSet","test_f","test","json","config","shuffleInplace","floor","bucketSize","abort","currentRate","testSet","trainSet","start","Date","now","schedule","customLog","console","log","testSize","testError","isArray","numTrain","ceil","lastError","currentSetSize","currentBucket","every","do","shuffle","results","time","trainAsync","workerTrain","bind","Promise","resolve","reject","e","errorSum","callback","suppressWarning","warn","onmessage","action","message","ownership","memoryBuffer","terminate","scheduled","postMessage","XOR","defaults","DSR","distractors","prompts","criterion","success","CROSS_ENTROPY","trial","correct","symbols","noRepeat","range","avoid","number","used","equal","prediction","round","sequence","sequenceLength","any","indexes","positions","sort","distractorsCorrect","targetsCorrect","divideError","ERG","Node","connect","node","reberGrammar","n1","n2","n3","n4","n5","n6","embededReberGrammar","reber1","reber2","generate","next","str","ch","charAt","different","array1","array2","max1","i1","max2","i2","iteration","table","read","predict","timingTask","getSamples","trainingSize","t","k","trainingSet","trainingSamples","trainSamples","testSamples","samples","crossentropy","mse","BINARY","misses","_synaptic","myNANDNetwork","myXORNetwork","myORNetwork","myANDNetwork","learningRate","initializeTrainNANDNetwork","initializeTrainXORNetwork","initializeTrainORNetwork","initializeTrainANDNetwork","fillTable","createTruthTable","tr","document","createElement","th1","th2","cloneNode","th3","setAttribute","style","textAlign","text1","createTextNode","text2","text3","appendChild","getElementById","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Synaptic","Architect","apply","undefined","oldSynaptic","ninja","Perceptron","previous","LSTM","last","option","peepholes","hiddenToHidden","outputToHidden","outputToGates","inputToOutput","hiddenLayers","inputGate","forgetGate","memoryCell","outputGate","cell","self","Liquid","gates","connectionList","Hopfield","trainer","proto","learn","patterns","feed","pattern","architecture"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, {\r\n/******/ \t\t\t\tconfigurable: false,\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tget: getter\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {// export\r\nif (module) module.exports = Neuron;\r\n\r\n/******************************************************************************************\r\n                                         NEURON\r\n*******************************************************************************************/\r\n\r\nfunction Neuron() {\r\n  this.ID = Neuron.uid();\r\n\r\n  this.connections = {\r\n    inputs: {},\r\n    projected: {},\r\n    gated: {}\r\n  };\r\n  this.error = {\r\n    responsibility: 0,\r\n    projected: 0,\r\n    gated: 0\r\n  };\r\n  this.trace = {\r\n    elegibility: {},\r\n    extended: {},\r\n    influences: {}\r\n  };\r\n  this.state = 0;\r\n  this.old = 0;\r\n  this.activation = 0;\r\n  this.selfconnection = new Neuron.connection(this, this, 0); // weight = 0 -> not connected\r\n  this.squash = Neuron.squash.LOGISTIC;\r\n  this.neighboors = {};\r\n  this.bias = Math.random() * .2 - .1;\r\n}\r\n\r\nNeuron.prototype = {\r\n\r\n  // activate the neuron\r\n  activate: function(input) {\r\n    // activation from enviroment (for input neurons)\r\n    if (typeof input != 'undefined') {\r\n      this.activation = input;\r\n      this.derivative = 0;\r\n      this.bias = 0;\r\n      return this.activation;\r\n    }\r\n\r\n    // old state\r\n    this.old = this.state;\r\n\r\n    // eq. 15\r\n    this.state = this.selfconnection.gain * this.selfconnection.weight *\r\n      this.state + this.bias;\r\n\r\n    for (var i in this.connections.inputs) {\r\n      var input = this.connections.inputs[i];\r\n      this.state += input.from.activation * input.weight * input.gain;\r\n    }\r\n\r\n    // eq. 16\r\n    this.activation = this.squash(this.state);\r\n\r\n    // f'(s)\r\n    this.derivative = this.squash(this.state, true);\r\n\r\n    // update traces\r\n    var influences = [];\r\n    for (var id in this.trace.extended) {\r\n      // extended elegibility trace\r\n      var neuron = this.neighboors[id];\r\n\r\n      // if gated neuron's selfconnection is gated by this unit, the influence keeps track of the neuron's old state\r\n      var influence = neuron.selfconnection.gater == this ? neuron.old : 0;\r\n\r\n      // index runs over all the incoming connections to the gated neuron that are gated by this unit\r\n      for (var incoming in this.trace.influences[neuron.ID]) { // captures the effect that has an input connection to this unit, on a neuron that is gated by this unit\r\n        influence += this.trace.influences[neuron.ID][incoming].weight *\r\n          this.trace.influences[neuron.ID][incoming].from.activation;\r\n      }\r\n      influences[neuron.ID] = influence;\r\n    }\r\n\r\n    for (var i in this.connections.inputs) {\r\n      var input = this.connections.inputs[i];\r\n\r\n      // elegibility trace - Eq. 17\r\n      this.trace.elegibility[input.ID] = this.selfconnection.gain * this.selfconnection\r\n        .weight * this.trace.elegibility[input.ID] + input.gain * input.from\r\n        .activation;\r\n\r\n      for (var id in this.trace.extended) {\r\n        // extended elegibility trace\r\n        var xtrace = this.trace.extended[id];\r\n        var neuron = this.neighboors[id];\r\n        var influence = influences[neuron.ID];\r\n\r\n        // eq. 18\r\n        xtrace[input.ID] = neuron.selfconnection.gain * neuron.selfconnection\r\n          .weight * xtrace[input.ID] + this.derivative * this.trace.elegibility[\r\n            input.ID] * influence;\r\n      }\r\n    }\r\n\r\n    //  update gated connection's gains\r\n    for (var connection in this.connections.gated) {\r\n      this.connections.gated[connection].gain = this.activation;\r\n    }\r\n\r\n    return this.activation;\r\n  },\r\n\r\n  // back-propagate the error\r\n  propagate: function(rate, target) {\r\n    // error accumulator\r\n    var error = 0;\r\n\r\n    // whether or not this neuron is in the output layer\r\n    var isOutput = typeof target != 'undefined';\r\n\r\n    // output neurons get their error from the enviroment\r\n    if (isOutput)\r\n      this.error.responsibility = this.error.projected = target - this.activation; // Eq. 10\r\n\r\n    else // the rest of the neuron compute their error responsibilities by backpropagation\r\n    {\r\n      // error responsibilities from all the connections projected from this neuron\r\n      for (var id in this.connections.projected) {\r\n        var connection = this.connections.projected[id];\r\n        var neuron = connection.to;\r\n        // Eq. 21\r\n        error += neuron.error.responsibility * connection.gain * connection.weight;\r\n      }\r\n\r\n      // projected error responsibility\r\n      this.error.projected = this.derivative * error;\r\n\r\n      error = 0;\r\n      // error responsibilities from all the connections gated by this neuron\r\n      for (var id in this.trace.extended) {\r\n        var neuron = this.neighboors[id]; // gated neuron\r\n        var influence = neuron.selfconnection.gater == this ? neuron.old : 0; // if gated neuron's selfconnection is gated by this neuron\r\n\r\n        // index runs over all the connections to the gated neuron that are gated by this neuron\r\n        for (var input in this.trace.influences[id]) { // captures the effect that the input connection of this neuron have, on a neuron which its input/s is/are gated by this neuron\r\n          influence += this.trace.influences[id][input].weight * this.trace.influences[\r\n            neuron.ID][input].from.activation;\r\n        }\r\n        // eq. 22\r\n        error += neuron.error.responsibility * influence;\r\n      }\r\n\r\n      // gated error responsibility\r\n      this.error.gated = this.derivative * error;\r\n\r\n      // error responsibility - Eq. 23\r\n      this.error.responsibility = this.error.projected + this.error.gated;\r\n    }\r\n\r\n    // learning rate\r\n    rate = rate || .1;\r\n\r\n    // adjust all the neuron's incoming connections\r\n    for (var id in this.connections.inputs) {\r\n      var input = this.connections.inputs[id];\r\n\r\n      // Eq. 24\r\n      var gradient = this.error.projected * this.trace.elegibility[input.ID];\r\n      for (var id in this.trace.extended) {\r\n        var neuron = this.neighboors[id];\r\n        gradient += neuron.error.responsibility * this.trace.extended[\r\n          neuron.ID][input.ID];\r\n      }\r\n      input.weight += rate * gradient; // adjust weights - aka learn\r\n    }\r\n\r\n    // adjust bias\r\n    this.bias += rate * this.error.responsibility;\r\n  },\r\n\r\n  project: function(neuron, weight) {\r\n    // self-connection\r\n    if (neuron == this) {\r\n      this.selfconnection.weight = 1;\r\n      return this.selfconnection;\r\n    }\r\n\r\n    // check if connection already exists\r\n    var connected = this.connected(neuron);\r\n    if (connected && connected.type == \"projected\") {\r\n      // update connection\r\n      if (typeof weight != 'undefined')\r\n        connected.connection.weight = weight;\r\n      // return existing connection\r\n      return connected.connection;\r\n    } else {\r\n      // create a new connection\r\n      var connection = new Neuron.connection(this, neuron, weight);\r\n    }\r\n\r\n    // reference all the connections and traces\r\n    this.connections.projected[connection.ID] = connection;\r\n    this.neighboors[neuron.ID] = neuron;\r\n    neuron.connections.inputs[connection.ID] = connection;\r\n    neuron.trace.elegibility[connection.ID] = 0;\r\n\r\n    for (var id in neuron.trace.extended) {\r\n      var trace = neuron.trace.extended[id];\r\n      trace[connection.ID] = 0;\r\n    }\r\n\r\n    return connection;\r\n  },\r\n\r\n  gate: function(connection) {\r\n    // add connection to gated list\r\n    this.connections.gated[connection.ID] = connection;\r\n\r\n    var neuron = connection.to;\r\n    if (!(neuron.ID in this.trace.extended)) {\r\n      // extended trace\r\n      this.neighboors[neuron.ID] = neuron;\r\n      var xtrace = this.trace.extended[neuron.ID] = {};\r\n      for (var id in this.connections.inputs) {\r\n        var input = this.connections.inputs[id];\r\n        xtrace[input.ID] = 0;\r\n      }\r\n    }\r\n\r\n    // keep track\r\n    if (neuron.ID in this.trace.influences)\r\n      this.trace.influences[neuron.ID].push(connection);\r\n    else\r\n      this.trace.influences[neuron.ID] = [connection];\r\n\r\n    // set gater\r\n    connection.gater = this;\r\n  },\r\n\r\n  // returns true or false whether the neuron is self-connected or not\r\n  selfconnected: function() {\r\n    return this.selfconnection.weight !== 0;\r\n  },\r\n\r\n  // returns true or false whether the neuron is connected to another neuron (parameter)\r\n  connected: function(neuron) {\r\n    var result = {\r\n      type: null,\r\n      connection: false\r\n    };\r\n\r\n    if (this == neuron) {\r\n      if (this.selfconnected()) {\r\n        result.type = 'selfconnection';\r\n        result.connection = this.selfconnection;\r\n        return result;\r\n      } else\r\n        return false;\r\n    }\r\n\r\n    for (var type in this.connections) {\r\n      for (var connection in this.connections[type]) {\r\n        var connection = this.connections[type][connection];\r\n        if (connection.to == neuron) {\r\n          result.type = type;\r\n          result.connection = connection;\r\n          return result;\r\n        } else if (connection.from == neuron) {\r\n          result.type = type;\r\n          result.connection = connection;\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  // clears all the traces (the neuron forgets it's context, but the connections remain intact)\r\n  clear: function() {\r\n    for (var trace in this.trace.elegibility){\r\n      this.trace.elegibility[trace] = 0;\r\n    }\r\n\r\n    for (var trace in this.trace.extended){\r\n      for (var extended in this.trace.extended[trace]){\r\n        this.trace.extended[trace][extended] = 0;\r\n      }\r\n    }\r\n\r\n    this.error.responsibility = this.error.projected = this.error.gated = 0;\r\n  },\r\n\r\n  // all the connections are randomized and the traces are cleared\r\n  reset: function() {\r\n    this.clear();\r\n\r\n    for (var type in this.connections){\r\n      for (var connection in this.connections[type]){\r\n        this.connections[type][connection].weight = Math.random() * .2 - .1;\r\n      }\r\n    }\r\n\r\n    this.bias = Math.random() * .2 - .1;\r\n    this.old = this.state = this.activation = 0;\r\n  },\r\n\r\n  // hardcodes the behaviour of the neuron into an optimized function\r\n  optimize: function(optimized, layer) {\r\n\r\n    optimized = optimized || {};\r\n    var store_activation = [];\r\n    var store_trace = [];\r\n    var store_propagation = [];\r\n    var varID = optimized.memory || 0;\r\n    var neurons = optimized.neurons || 1;\r\n    var inputs = optimized.inputs || [];\r\n    var targets = optimized.targets || [];\r\n    var outputs = optimized.outputs || [];\r\n    var variables = optimized.variables || {};\r\n    var activation_sentences = optimized.activation_sentences || [];\r\n    var trace_sentences = optimized.trace_sentences || [];\r\n    var propagation_sentences = optimized.propagation_sentences || [];\r\n    var layers = optimized.layers || { __count: 0, __neuron: 0 };\r\n\r\n    // allocate sentences\r\n    var allocate = function(store){\r\n      var allocated = layer in layers && store[layers.__count];\r\n      if (!allocated)\r\n      {\r\n        layers.__count = store.push([]) - 1;\r\n        layers[layer] = layers.__count;\r\n      }\r\n    };\r\n    allocate(activation_sentences);\r\n    allocate(trace_sentences);\r\n    allocate(propagation_sentences);\r\n    var currentLayer = layers.__count;\r\n\r\n    // get/reserve space in memory by creating a unique ID for a variablel\r\n    var getVar = function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n\r\n      if (args.length == 1) {\r\n        if (args[0] == 'target') {\r\n          var id = 'target_' + targets.length;\r\n          targets.push(varID);\r\n        } else\r\n          var id = args[0];\r\n        if (id in variables)\r\n          return variables[id];\r\n        return variables[id] = {\r\n          value: 0,\r\n          id: varID++\r\n        };\r\n      } else {\r\n        var extended = args.length > 2;\r\n        if (extended)\r\n          var value = args.pop();\r\n\r\n        var unit = args.shift();\r\n        var prop = args.pop();\r\n\r\n        if (!extended)\r\n          var value = unit[prop];\r\n\r\n        var id = prop + '_';\r\n        for (var i = 0; i < args.length; i++)\r\n          id += args[i] + '_';\r\n        id += unit.ID;\r\n        if (id in variables)\r\n          return variables[id];\r\n\r\n        return variables[id] = {\r\n          value: value,\r\n          id: varID++\r\n        };\r\n      }\r\n    };\r\n\r\n    // build sentence\r\n    var buildSentence = function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      var store = args.pop();\r\n      var sentence = \"\";\r\n      for (var i = 0; i < args.length; i++)\r\n        if (typeof args[i] == 'string')\r\n          sentence += args[i];\r\n        else\r\n          sentence += 'F[' + args[i].id + ']';\r\n\r\n      store.push(sentence + ';');\r\n    };\r\n\r\n    // helper to check if an object is empty\r\n    var isEmpty = function(obj) {\r\n      for (var prop in obj) {\r\n        if (obj.hasOwnProperty(prop))\r\n          return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // characteristics of the neuron\r\n    var noProjections = isEmpty(this.connections.projected);\r\n    var noGates = isEmpty(this.connections.gated);\r\n    var isInput = layer == 'input' ? true : isEmpty(this.connections.inputs);\r\n    var isOutput = layer == 'output' ? true : noProjections && noGates;\r\n\r\n    // optimize neuron's behaviour\r\n    var rate = getVar('rate');\r\n    var activation = getVar(this, 'activation');\r\n    if (isInput)\r\n      inputs.push(activation.id);\r\n    else {\r\n      activation_sentences[currentLayer].push(store_activation);\r\n      trace_sentences[currentLayer].push(store_trace);\r\n      propagation_sentences[currentLayer].push(store_propagation);\r\n      var old = getVar(this, 'old');\r\n      var state = getVar(this, 'state');\r\n      var bias = getVar(this, 'bias');\r\n      if (this.selfconnection.gater)\r\n        var self_gain = getVar(this.selfconnection, 'gain');\r\n      if (this.selfconnected())\r\n        var self_weight = getVar(this.selfconnection, 'weight');\r\n      buildSentence(old, ' = ', state, store_activation);\r\n      if (this.selfconnected())\r\n        if (this.selfconnection.gater)\r\n          buildSentence(state, ' = ', self_gain, ' * ', self_weight, ' * ',\r\n            state, ' + ', bias, store_activation);\r\n        else\r\n          buildSentence(state, ' = ', self_weight, ' * ', state, ' + ',\r\n            bias, store_activation);\r\n      else\r\n        buildSentence(state, ' = ', bias, store_activation);\r\n      for (var i in this.connections.inputs) {\r\n        var input = this.connections.inputs[i];\r\n        var input_activation = getVar(input.from, 'activation');\r\n        var input_weight = getVar(input, 'weight');\r\n        if (input.gater)\r\n          var input_gain = getVar(input, 'gain');\r\n        if (this.connections.inputs[i].gater)\r\n          buildSentence(state, ' += ', input_activation, ' * ',\r\n            input_weight, ' * ', input_gain, store_activation);\r\n        else\r\n          buildSentence(state, ' += ', input_activation, ' * ',\r\n            input_weight, store_activation);\r\n      }\r\n      var derivative = getVar(this, 'derivative');\r\n      switch (this.squash) {\r\n        case Neuron.squash.LOGISTIC:\r\n          buildSentence(activation, ' = (1 / (1 + Math.exp(-', state, ')))',\r\n            store_activation);\r\n          buildSentence(derivative, ' = ', activation, ' * (1 - ',\r\n            activation, ')', store_activation);\r\n          break;\r\n        case Neuron.squash.TANH:\r\n          var eP = getVar('aux');\r\n          var eN = getVar('aux_2');\r\n          buildSentence(eP, ' = Math.exp(', state, ')', store_activation);\r\n          buildSentence(eN, ' = 1 / ', eP, store_activation);\r\n          buildSentence(activation, ' = (', eP, ' - ', eN, ') / (', eP, ' + ', eN, ')', store_activation);\r\n          buildSentence(derivative, ' = 1 - (', activation, ' * ', activation, ')', store_activation);\r\n          break;\r\n        case Neuron.squash.IDENTITY:\r\n          buildSentence(activation, ' = ', state, store_activation);\r\n          buildSentence(derivative, ' = 1', store_activation);\r\n          break;\r\n        case Neuron.squash.HLIM:\r\n          buildSentence(activation, ' = +(', state, ' > 0)', store_activation);\r\n          buildSentence(derivative, ' = 1', store_activation);\r\n        case Neuron.squash.RELU:\r\n          buildSentence(activation, ' = ', state, ' > 0 ? ', state, ' : 0', store_activation);\r\n          buildSentence(derivative, ' = ', state, ' > 0 ? 1 : 0', store_activation);\r\n          break;\r\n      }\r\n\r\n      for (var id in this.trace.extended) {\r\n        // calculate extended elegibility traces in advance\r\n        var neuron = this.neighboors[id];\r\n        var influence = getVar('influences[' + neuron.ID + ']');\r\n        var neuron_old = getVar(neuron, 'old');\r\n        var initialized = false;\r\n        if (neuron.selfconnection.gater == this)\r\n        {\r\n          buildSentence(influence, ' = ', neuron_old, store_trace);\r\n          initialized = true;\r\n        }\r\n        for (var incoming in this.trace.influences[neuron.ID]) {\r\n          var incoming_weight = getVar(this.trace.influences[neuron.ID]\r\n            [incoming], 'weight');\r\n          var incoming_activation = getVar(this.trace.influences[neuron.ID]\r\n            [incoming].from, 'activation');\r\n\r\n          if (initialized)\r\n            buildSentence(influence, ' += ', incoming_weight, ' * ', incoming_activation, store_trace);\r\n          else {\r\n            buildSentence(influence, ' = ', incoming_weight, ' * ', incoming_activation, store_trace);\r\n            initialized = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      for (var i in this.connections.inputs) {\r\n        var input = this.connections.inputs[i];\r\n        if (input.gater)\r\n          var input_gain = getVar(input, 'gain');\r\n        var input_activation = getVar(input.from, 'activation');\r\n        var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace\r\n          .elegibility[input.ID]);\r\n        if (this.selfconnected()) {\r\n          if (this.selfconnection.gater) {\r\n            if (input.gater)\r\n              buildSentence(trace, ' = ', self_gain, ' * ', self_weight,\r\n                ' * ', trace, ' + ', input_gain, ' * ', input_activation,\r\n                store_trace);\r\n            else\r\n              buildSentence(trace, ' = ', self_gain, ' * ', self_weight,\r\n                ' * ', trace, ' + ', input_activation, store_trace);\r\n          } else {\r\n            if (input.gater)\r\n              buildSentence(trace, ' = ', self_weight, ' * ', trace, ' + ',\r\n                input_gain, ' * ', input_activation, store_trace);\r\n            else\r\n              buildSentence(trace, ' = ', self_weight, ' * ', trace, ' + ',\r\n                input_activation, store_trace);\r\n          }\r\n        } else {\r\n          if (input.gater)\r\n            buildSentence(trace, ' = ', input_gain, ' * ', input_activation,\r\n              store_trace);\r\n          else\r\n            buildSentence(trace, ' = ', input_activation, store_trace);\r\n        }\r\n        for (var id in this.trace.extended) {\r\n          // extended elegibility trace\r\n          var neuron = this.neighboors[id];\r\n          var influence = getVar('influences[' + neuron.ID + ']');\r\n\r\n          var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace\r\n            .elegibility[input.ID]);\r\n          var xtrace = getVar(this, 'trace', 'extended', neuron.ID, input.ID,\r\n            this.trace.extended[neuron.ID][input.ID]);\r\n          if (neuron.selfconnected())\r\n            var neuron_self_weight = getVar(neuron.selfconnection, 'weight');\r\n          if (neuron.selfconnection.gater)\r\n            var neuron_self_gain = getVar(neuron.selfconnection, 'gain');\r\n          if (neuron.selfconnected())\r\n            if (neuron.selfconnection.gater)\r\n              buildSentence(xtrace, ' = ', neuron_self_gain, ' * ',\r\n                neuron_self_weight, ' * ', xtrace, ' + ', derivative, ' * ',\r\n                trace, ' * ', influence, store_trace);\r\n            else\r\n              buildSentence(xtrace, ' = ', neuron_self_weight, ' * ',\r\n                xtrace, ' + ', derivative, ' * ', trace, ' * ',\r\n                influence, store_trace);\r\n          else\r\n            buildSentence(xtrace, ' = ', derivative, ' * ', trace, ' * ',\r\n              influence, store_trace);\r\n        }\r\n      }\r\n      for (var connection in this.connections.gated) {\r\n        var gated_gain = getVar(this.connections.gated[connection], 'gain');\r\n        buildSentence(gated_gain, ' = ', activation, store_activation);\r\n      }\r\n    }\r\n    if (!isInput) {\r\n      var responsibility = getVar(this, 'error', 'responsibility', this.error\r\n        .responsibility);\r\n      if (isOutput) {\r\n        var target = getVar('target');\r\n        buildSentence(responsibility, ' = ', target, ' - ', activation,\r\n          store_propagation);\r\n        for (var id in this.connections.inputs) {\r\n          var input = this.connections.inputs[id];\r\n          var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace\r\n            .elegibility[input.ID]);\r\n          var input_weight = getVar(input, 'weight');\r\n          buildSentence(input_weight, ' += ', rate, ' * (', responsibility,\r\n            ' * ', trace, ')', store_propagation);\r\n        }\r\n        outputs.push(activation.id);\r\n      } else {\r\n        if (!noProjections && !noGates) {\r\n          var error = getVar('aux');\r\n          for (var id in this.connections.projected) {\r\n            var connection = this.connections.projected[id];\r\n            var neuron = connection.to;\r\n            var connection_weight = getVar(connection, 'weight');\r\n            var neuron_responsibility = getVar(neuron, 'error',\r\n              'responsibility', neuron.error.responsibility);\r\n            if (connection.gater) {\r\n              var connection_gain = getVar(connection, 'gain');\r\n              buildSentence(error, ' += ', neuron_responsibility, ' * ',\r\n                connection_gain, ' * ', connection_weight,\r\n                store_propagation);\r\n            } else\r\n              buildSentence(error, ' += ', neuron_responsibility, ' * ',\r\n                connection_weight, store_propagation);\r\n          }\r\n          var projected = getVar(this, 'error', 'projected', this.error.projected);\r\n          buildSentence(projected, ' = ', derivative, ' * ', error,\r\n            store_propagation);\r\n          buildSentence(error, ' = 0', store_propagation);\r\n          for (var id in this.trace.extended) {\r\n            var neuron = this.neighboors[id];\r\n            var influence = getVar('aux_2');\r\n            var neuron_old = getVar(neuron, 'old');\r\n            if (neuron.selfconnection.gater == this)\r\n              buildSentence(influence, ' = ', neuron_old, store_propagation);\r\n            else\r\n              buildSentence(influence, ' = 0', store_propagation);\r\n            for (var input in this.trace.influences[neuron.ID]) {\r\n              var connection = this.trace.influences[neuron.ID][input];\r\n              var connection_weight = getVar(connection, 'weight');\r\n              var neuron_activation = getVar(connection.from, 'activation');\r\n              buildSentence(influence, ' += ', connection_weight, ' * ',\r\n                neuron_activation, store_propagation);\r\n            }\r\n            var neuron_responsibility = getVar(neuron, 'error',\r\n              'responsibility', neuron.error.responsibility);\r\n            buildSentence(error, ' += ', neuron_responsibility, ' * ',\r\n              influence, store_propagation);\r\n          }\r\n          var gated = getVar(this, 'error', 'gated', this.error.gated);\r\n          buildSentence(gated, ' = ', derivative, ' * ', error,\r\n            store_propagation);\r\n          buildSentence(responsibility, ' = ', projected, ' + ', gated,\r\n            store_propagation);\r\n          for (var id in this.connections.inputs) {\r\n            var input = this.connections.inputs[id];\r\n            var gradient = getVar('aux');\r\n            var trace = getVar(this, 'trace', 'elegibility', input.ID, this\r\n              .trace.elegibility[input.ID]);\r\n            buildSentence(gradient, ' = ', projected, ' * ', trace,\r\n              store_propagation);\r\n            for (var id in this.trace.extended) {\r\n              var neuron = this.neighboors[id];\r\n              var neuron_responsibility = getVar(neuron, 'error',\r\n                'responsibility', neuron.error.responsibility);\r\n              var xtrace = getVar(this, 'trace', 'extended', neuron.ID,\r\n                input.ID, this.trace.extended[neuron.ID][input.ID]);\r\n              buildSentence(gradient, ' += ', neuron_responsibility, ' * ',\r\n                xtrace, store_propagation);\r\n            }\r\n            var input_weight = getVar(input, 'weight');\r\n            buildSentence(input_weight, ' += ', rate, ' * ', gradient,\r\n              store_propagation);\r\n          }\r\n\r\n        } else if (noGates) {\r\n          buildSentence(responsibility, ' = 0', store_propagation);\r\n          for (var id in this.connections.projected) {\r\n            var connection = this.connections.projected[id];\r\n            var neuron = connection.to;\r\n            var connection_weight = getVar(connection, 'weight');\r\n            var neuron_responsibility = getVar(neuron, 'error',\r\n              'responsibility', neuron.error.responsibility);\r\n            if (connection.gater) {\r\n              var connection_gain = getVar(connection, 'gain');\r\n              buildSentence(responsibility, ' += ', neuron_responsibility,\r\n                ' * ', connection_gain, ' * ', connection_weight,\r\n                store_propagation);\r\n            } else\r\n              buildSentence(responsibility, ' += ', neuron_responsibility,\r\n                ' * ', connection_weight, store_propagation);\r\n          }\r\n          buildSentence(responsibility, ' *= ', derivative,\r\n            store_propagation);\r\n          for (var id in this.connections.inputs) {\r\n            var input = this.connections.inputs[id];\r\n            var trace = getVar(this, 'trace', 'elegibility', input.ID, this\r\n              .trace.elegibility[input.ID]);\r\n            var input_weight = getVar(input, 'weight');\r\n            buildSentence(input_weight, ' += ', rate, ' * (',\r\n              responsibility, ' * ', trace, ')', store_propagation);\r\n          }\r\n        } else if (noProjections) {\r\n          buildSentence(responsibility, ' = 0', store_propagation);\r\n          for (var id in this.trace.extended) {\r\n            var neuron = this.neighboors[id];\r\n            var influence = getVar('aux');\r\n            var neuron_old = getVar(neuron, 'old');\r\n            if (neuron.selfconnection.gater == this)\r\n              buildSentence(influence, ' = ', neuron_old, store_propagation);\r\n            else\r\n              buildSentence(influence, ' = 0', store_propagation);\r\n            for (var input in this.trace.influences[neuron.ID]) {\r\n              var connection = this.trace.influences[neuron.ID][input];\r\n              var connection_weight = getVar(connection, 'weight');\r\n              var neuron_activation = getVar(connection.from, 'activation');\r\n              buildSentence(influence, ' += ', connection_weight, ' * ',\r\n                neuron_activation, store_propagation);\r\n            }\r\n            var neuron_responsibility = getVar(neuron, 'error',\r\n              'responsibility', neuron.error.responsibility);\r\n            buildSentence(responsibility, ' += ', neuron_responsibility,\r\n              ' * ', influence, store_propagation);\r\n          }\r\n          buildSentence(responsibility, ' *= ', derivative,\r\n            store_propagation);\r\n          for (var id in this.connections.inputs) {\r\n            var input = this.connections.inputs[id];\r\n            var gradient = getVar('aux');\r\n            buildSentence(gradient, ' = 0', store_propagation);\r\n            for (var id in this.trace.extended) {\r\n              var neuron = this.neighboors[id];\r\n              var neuron_responsibility = getVar(neuron, 'error',\r\n                'responsibility', neuron.error.responsibility);\r\n              var xtrace = getVar(this, 'trace', 'extended', neuron.ID,\r\n                input.ID, this.trace.extended[neuron.ID][input.ID]);\r\n              buildSentence(gradient, ' += ', neuron_responsibility, ' * ',\r\n                xtrace, store_propagation);\r\n            }\r\n            var input_weight = getVar(input, 'weight');\r\n            buildSentence(input_weight, ' += ', rate, ' * ', gradient,\r\n              store_propagation);\r\n          }\r\n        }\r\n      }\r\n      buildSentence(bias, ' += ', rate, ' * ', responsibility,\r\n        store_propagation);\r\n    }\r\n    return {\r\n      memory: varID,\r\n      neurons: neurons + 1,\r\n      inputs: inputs,\r\n      outputs: outputs,\r\n      targets: targets,\r\n      variables: variables,\r\n      activation_sentences: activation_sentences,\r\n      trace_sentences: trace_sentences,\r\n      propagation_sentences: propagation_sentences,\r\n      layers: layers\r\n    }\r\n  }\r\n}\r\n\r\n// represents a connection between two neurons\r\nNeuron.connection = function Connection(from, to, weight) {\r\n  if (!from || !to)\r\n    throw new Error(\"Connection Error: Invalid neurons\");\r\n\r\n  this.ID = Neuron.connection.uid();\r\n  this.from = from;\r\n  this.to = to;\r\n  this.weight = typeof weight == 'undefined' ? Math.random() * .2 - .1 : weight;\r\n  this.gain = 1;\r\n  this.gater = null;\r\n}\r\n\r\n// squashing functions\r\nNeuron.squash = {};\r\n\r\n// eq. 5 & 5'\r\nNeuron.squash.LOGISTIC = function(x, derivate) {\r\n  var fx = 1 / (1 + Math.exp(-x));\r\n  if (!derivate)\r\n    return fx;\r\n  return fx * (1 - fx);\r\n};\r\nNeuron.squash.TANH = function(x, derivate) {\r\n  if(derivate)\r\n    return 1 - Math.pow(Math.tanh(x), 2);\r\n  return Math.tanh(x);\r\n};\r\nNeuron.squash.IDENTITY = function(x, derivate) {\r\n  return derivate ? 1 : x;\r\n};\r\nNeuron.squash.HLIM = function(x, derivate) {\r\n  return derivate ? 1 : x > 0 ? 1 : 0;\r\n};\r\nNeuron.squash.RELU = function(x, derivate) {\r\n  if (derivate)\r\n    return x > 0 ? 1 : 0;\r\n  return x > 0 ? x : 0;\r\n};\r\n\r\n// unique ID's\r\n(function() {\r\n  var neurons = 0;\r\n  var connections = 0;\r\n  Neuron.uid = function() {\r\n    return neurons++;\r\n  }\r\n  Neuron.connection.uid = function() {\r\n    return connections++;\r\n  }\r\n  Neuron.quantity = function() {\r\n    return {\r\n      neurons: neurons,\r\n      connections: connections\r\n    }\r\n  }\r\n})();\r\n\r\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)(module)))\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {// export\r\nif (module) module.exports = Layer;\r\n\r\n// import\r\nvar Neuron  = __webpack_require__(1)\r\n,   Network = __webpack_require__(3)\r\n\r\n/*******************************************************************************************\r\n                                            LAYER\r\n*******************************************************************************************/\r\n\r\nfunction Layer(size) {\r\n  this.size = size | 0;\r\n  this.list = [];\r\n\r\n  this.connectedTo = [];\r\n\r\n  while (size--) {\r\n    var neuron = new Neuron();\r\n    this.list.push(neuron);\r\n  }\r\n}\r\n\r\nLayer.prototype = {\r\n\r\n  // activates all the neurons in the layer\r\n  activate: function(input) {\r\n\r\n    var activations = [];\r\n\r\n    if (typeof input != 'undefined') {\r\n      if (input.length != this.size)\r\n        throw new Error(\"INPUT size and LAYER size must be the same to activate!\");\r\n\r\n      for (var id in this.list) {\r\n        var neuron = this.list[id];\r\n        var activation = neuron.activate(input[id]);\r\n        activations.push(activation);\r\n      }\r\n    } else {\r\n      for (var id in this.list) {\r\n        var neuron = this.list[id];\r\n        var activation = neuron.activate();\r\n        activations.push(activation);\r\n      }\r\n    }\r\n    return activations;\r\n  },\r\n\r\n  // propagates the error on all the neurons of the layer\r\n  propagate: function(rate, target) {\r\n\r\n    if (typeof target != 'undefined') {\r\n      if (target.length != this.size)\r\n        throw new Error(\"TARGET size and LAYER size must be the same to propagate!\");\r\n\r\n      for (var id = this.list.length - 1; id >= 0; id--) {\r\n        var neuron = this.list[id];\r\n        neuron.propagate(rate, target[id]);\r\n      }\r\n    } else {\r\n      for (var id = this.list.length - 1; id >= 0; id--) {\r\n        var neuron = this.list[id];\r\n        neuron.propagate(rate);\r\n      }\r\n    }\r\n  },\r\n\r\n  // projects a connection from this layer to another one\r\n  project: function(layer, type, weights) {\r\n\r\n    if (layer instanceof Network)\r\n      layer = layer.layers.input;\r\n\r\n    if (layer instanceof Layer) {\r\n      if (!this.connected(layer))\r\n        return new Layer.connection(this, layer, type, weights);\r\n    } else\r\n      throw new Error(\"Invalid argument, you can only project connections to LAYERS and NETWORKS!\");\r\n\r\n\r\n  },\r\n\r\n  // gates a connection betwenn two layers\r\n  gate: function(connection, type) {\r\n\r\n    if (type == Layer.gateType.INPUT) {\r\n      if (connection.to.size != this.size)\r\n        throw new Error(\"GATER layer and CONNECTION.TO layer must be the same size in order to gate!\");\r\n\r\n      for (var id in connection.to.list) {\r\n        var neuron = connection.to.list[id];\r\n        var gater = this.list[id];\r\n        for (var input in neuron.connections.inputs) {\r\n          var gated = neuron.connections.inputs[input];\r\n          if (gated.ID in connection.connections)\r\n            gater.gate(gated);\r\n        }\r\n      }\r\n    } else if (type == Layer.gateType.OUTPUT) {\r\n      if (connection.from.size != this.size)\r\n        throw new Error(\"GATER layer and CONNECTION.FROM layer must be the same size in order to gate!\");\r\n\r\n      for (var id in connection.from.list) {\r\n        var neuron = connection.from.list[id];\r\n        var gater = this.list[id];\r\n        for (var projected in neuron.connections.projected) {\r\n          var gated = neuron.connections.projected[projected];\r\n          if (gated.ID in connection.connections)\r\n            gater.gate(gated);\r\n        }\r\n      }\r\n    } else if (type == Layer.gateType.ONE_TO_ONE) {\r\n      if (connection.size != this.size)\r\n        throw new Error(\"The number of GATER UNITS must be the same as the number of CONNECTIONS to gate!\");\r\n\r\n      for (var id in connection.list) {\r\n        var gater = this.list[id];\r\n        var gated = connection.list[id];\r\n        gater.gate(gated);\r\n      }\r\n    }\r\n    connection.gatedfrom.push({layer: this, type: type});\r\n  },\r\n\r\n  // true or false whether the whole layer is self-connected or not\r\n  selfconnected: function() {\r\n\r\n    for (var id in this.list) {\r\n      var neuron = this.list[id];\r\n      if (!neuron.selfconnected())\r\n        return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // true of false whether the layer is connected to another layer (parameter) or not\r\n  connected: function(layer) {\r\n    // Check if ALL to ALL connection\r\n    var connections = 0;\r\n    for (var here in this.list) {\r\n      for (var there in layer.list) {\r\n        var from = this.list[here];\r\n        var to = layer.list[there];\r\n        var connected = from.connected(to);\r\n        if (connected.type == 'projected')\r\n          connections++;\r\n      }\r\n    }\r\n    if (connections == this.size * layer.size)\r\n      return Layer.connectionType.ALL_TO_ALL;\r\n\r\n    // Check if ONE to ONE connection\r\n    connections = 0;\r\n    for (var neuron in this.list) {\r\n      var from = this.list[neuron];\r\n      var to = layer.list[neuron];\r\n      var connected = from.connected(to);\r\n      if (connected.type == 'projected')\r\n        connections++;\r\n    }\r\n    if (connections == this.size)\r\n      return Layer.connectionType.ONE_TO_ONE;\r\n  },\r\n\r\n  // clears all the neuorns in the layer\r\n  clear: function() {\r\n    for (var id in this.list) {\r\n      var neuron = this.list[id];\r\n      neuron.clear();\r\n    }\r\n  },\r\n\r\n  // resets all the neurons in the layer\r\n  reset: function() {\r\n    for (var id in this.list) {\r\n      var neuron = this.list[id];\r\n      neuron.reset();\r\n    }\r\n  },\r\n\r\n  // returns all the neurons in the layer (array)\r\n  neurons: function() {\r\n    return this.list;\r\n  },\r\n\r\n  // adds a neuron to the layer\r\n  add: function(neuron) {\r\n    this.neurons[neuron.ID] = neuron || new Neuron();\r\n    this.list.push(neuron);\r\n    this.size++;\r\n  },\r\n\r\n  set: function(options) {\r\n    options = options || {};\r\n\r\n    for (var i in this.list) {\r\n      var neuron = this.list[i];\r\n      if (options.label)\r\n        neuron.label = options.label + '_' + neuron.ID;\r\n      if (options.squash)\r\n        neuron.squash = options.squash;\r\n      if (options.bias)\r\n        neuron.bias = options.bias;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n// represents a connection from one layer to another, and keeps track of its weight and gain\r\nLayer.connection = function LayerConnection(fromLayer, toLayer, type, weights) {\r\n  this.ID = Layer.connection.uid();\r\n  this.from = fromLayer;\r\n  this.to = toLayer;\r\n  this.selfconnection = toLayer == fromLayer;\r\n  this.type = type;\r\n  this.connections = {};\r\n  this.list = [];\r\n  this.size = 0;\r\n  this.gatedfrom = [];\r\n\r\n  if (typeof this.type == 'undefined')\r\n  {\r\n    if (fromLayer == toLayer)\r\n      this.type = Layer.connectionType.ONE_TO_ONE;\r\n    else\r\n      this.type = Layer.connectionType.ALL_TO_ALL;\r\n  }\r\n\r\n  if (this.type == Layer.connectionType.ALL_TO_ALL ||\r\n      this.type == Layer.connectionType.ALL_TO_ELSE) {\r\n    for (var here in this.from.list) {\r\n      for (var there in this.to.list) {\r\n        var from = this.from.list[here];\r\n        var to = this.to.list[there];\r\n        if(this.type == Layer.connectionType.ALL_TO_ELSE && from == to)\r\n          continue;\r\n        var connection = from.project(to, weights);\r\n\r\n        this.connections[connection.ID] = connection;\r\n        this.size = this.list.push(connection);\r\n      }\r\n    }\r\n  } else if (this.type == Layer.connectionType.ONE_TO_ONE) {\r\n\r\n    for (var neuron in this.from.list) {\r\n      var from = this.from.list[neuron];\r\n      var to = this.to.list[neuron];\r\n      var connection = from.project(to, weights);\r\n\r\n      this.connections[connection.ID] = connection;\r\n      this.size = this.list.push(connection);\r\n    }\r\n  }\r\n\r\n  fromLayer.connectedTo.push(this);\r\n}\r\n\r\n// types of connections\r\nLayer.connectionType = {};\r\nLayer.connectionType.ALL_TO_ALL = \"ALL TO ALL\";\r\nLayer.connectionType.ONE_TO_ONE = \"ONE TO ONE\";\r\nLayer.connectionType.ALL_TO_ELSE = \"ALL TO ELSE\";\r\n\r\n// types of gates\r\nLayer.gateType = {};\r\nLayer.gateType.INPUT = \"INPUT\";\r\nLayer.gateType.OUTPUT = \"OUTPUT\";\r\nLayer.gateType.ONE_TO_ONE = \"ONE TO ONE\";\r\n\r\n(function() {\r\n  var connections = 0;\r\n  Layer.connection.uid = function() {\r\n    return connections++;\r\n  }\r\n})();\r\n\r\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)(module)))\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {// export\r\nif (module) module.exports = Network;\r\n\r\n// import\r\nvar Neuron  = __webpack_require__(1)\r\n,   Layer   = __webpack_require__(2)\r\n,   Trainer = __webpack_require__(4)\r\n\r\n/*******************************************************************************************\r\n                                         NETWORK\r\n*******************************************************************************************/\r\n\r\nfunction Network(layers) {\r\n  if (typeof layers != 'undefined') {\r\n    this.layers = {\r\n      input:  layers.input || null,\r\n      hidden: layers.hidden || [],\r\n      output: layers.output || null\r\n    };\r\n    this.optimized = null;\r\n  }\r\n}\r\nNetwork.prototype = {\r\n\r\n  // feed-forward activation of all the layers to produce an ouput\r\n  activate: function(input) {\r\n    if (this.optimized === false)\r\n    {\r\n      this.layers.input.activate(input);\r\n      for (var i = 0; i < this.layers.hidden.length; i++)\r\n        this.layers.hidden[i].activate();\r\n      return this.layers.output.activate();\r\n    }\r\n    else\r\n    {\r\n      if (this.optimized == null)\r\n        this.optimize();\r\n      return this.optimized.activate(input);\r\n    }\r\n  },\r\n\r\n  // back-propagate the error thru the network\r\n  propagate: function(rate, target) {\r\n    if (this.optimized === false)\r\n    {\r\n      this.layers.output.propagate(rate, target);\r\n      for (var i = this.layers.hidden.length - 1; i >= 0; i--)\r\n        this.layers.hidden[i].propagate(rate);\r\n    }\r\n    else\r\n    {\r\n      if (this.optimized == null)\r\n        this.optimize();\r\n      this.optimized.propagate(rate, target);\r\n    }\r\n  },\r\n\r\n  // project a connection to another unit (either a network or a layer)\r\n  project: function(unit, type, weights) {\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n\r\n    if (unit instanceof Network)\r\n      return this.layers.output.project(unit.layers.input, type, weights);\r\n\r\n    if (unit instanceof Layer)\r\n      return this.layers.output.project(unit, type, weights);\r\n\r\n    throw new Error(\"Invalid argument, you can only project connections to LAYERS and NETWORKS!\");\r\n  },\r\n\r\n  // let this network gate a connection\r\n  gate: function(connection, type) {\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n    this.layers.output.gate(connection, type);\r\n  },\r\n\r\n  // clear all elegibility traces and extended elegibility traces (the network forgets its context, but not what was trained)\r\n  clear: function() {\r\n    this.restore();\r\n\r\n    var inputLayer = this.layers.input,\r\n      outputLayer = this.layers.output;\r\n\r\n    inputLayer.clear();\r\n    for (var i = 0; i < this.layers.hidden.length; i++) {\r\n      this.layers.hidden[i].clear();\r\n    }\r\n    outputLayer.clear();\r\n\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n  },\r\n\r\n  // reset all weights and clear all traces (ends up like a new network)\r\n  reset: function() {\r\n    this.restore();\r\n\r\n    var inputLayer = this.layers.input,\r\n      outputLayer = this.layers.output;\r\n\r\n    inputLayer.reset();\r\n    for (var i = 0; i < this.layers.hidden.length; i++) {\r\n      this.layers.hidden[i].reset();\r\n    }\r\n    outputLayer.reset();\r\n\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n  },\r\n\r\n  // hardcodes the behaviour of the whole network into a single optimized function\r\n  optimize: function() {\r\n    var that = this;\r\n    var optimized = {};\r\n    var neurons = this.neurons();\r\n\r\n    for (var i = 0; i < neurons.length; i++) {\r\n      var neuron = neurons[i].neuron;\r\n      var layer = neurons[i].layer;\r\n      while (neuron.neuron)\r\n        neuron = neuron.neuron;\r\n      optimized = neuron.optimize(optimized, layer);\r\n    }\r\n\r\n    for (var i = 0; i < optimized.propagation_sentences.length; i++)\r\n      optimized.propagation_sentences[i].reverse();\r\n    optimized.propagation_sentences.reverse();\r\n\r\n    var hardcode = \"\";\r\n    hardcode += \"var F = Float64Array ? new Float64Array(\" + optimized.memory +\r\n      \") : []; \";\r\n    for (var i in optimized.variables)\r\n      hardcode += \"F[\" + optimized.variables[i].id + \"] = \" + (optimized.variables[\r\n        i].value || 0) + \"; \";\r\n    hardcode += \"var activate = function(input){\\n\";\r\n    for (var i = 0; i < optimized.inputs.length; i++)\r\n      hardcode += \"F[\" + optimized.inputs[i] + \"] = input[\" + i + \"]; \";\r\n    for (var i = 0; i < optimized.activation_sentences.length; i++) {\r\n      if (optimized.activation_sentences[i].length > 0) {\r\n        for (var j = 0; j < optimized.activation_sentences[i].length; j++) {\r\n          hardcode += optimized.activation_sentences[i][j].join(\" \");\r\n          hardcode += optimized.trace_sentences[i][j].join(\" \");\r\n        }\r\n      }\r\n    }\r\n    hardcode += \" var output = []; \"\r\n    for (var i = 0; i < optimized.outputs.length; i++)\r\n      hardcode += \"output[\" + i + \"] = F[\" + optimized.outputs[i] + \"]; \";\r\n    hardcode += \"return output; }; \"\r\n    hardcode += \"var propagate = function(rate, target){\\n\";\r\n    hardcode += \"F[\" + optimized.variables.rate.id + \"] = rate; \";\r\n    for (var i = 0; i < optimized.targets.length; i++)\r\n      hardcode += \"F[\" + optimized.targets[i] + \"] = target[\" + i + \"]; \";\r\n    for (var i = 0; i < optimized.propagation_sentences.length; i++)\r\n      for (var j = 0; j < optimized.propagation_sentences[i].length; j++)\r\n        hardcode += optimized.propagation_sentences[i][j].join(\" \") + \" \";\r\n    hardcode += \" };\\n\";\r\n    hardcode +=\r\n      \"var ownership = function(memoryBuffer){\\nF = memoryBuffer;\\nthis.memory = F;\\n};\\n\";\r\n    hardcode +=\r\n      \"return {\\nmemory: F,\\nactivate: activate,\\npropagate: propagate,\\nownership: ownership\\n};\";\r\n    hardcode = hardcode.split(\";\").join(\";\\n\");\r\n\r\n    var constructor = new Function(hardcode);\r\n\r\n    var network = constructor();\r\n    network.data = {\r\n      variables: optimized.variables,\r\n      activate: optimized.activation_sentences,\r\n      propagate: optimized.propagation_sentences,\r\n      trace: optimized.trace_sentences,\r\n      inputs: optimized.inputs,\r\n      outputs: optimized.outputs,\r\n      check_activation: this.activate,\r\n      check_propagation: this.propagate\r\n    }\r\n\r\n    network.reset = function() {\r\n      if (that.optimized) {\r\n        that.optimized = null;\r\n        that.activate = network.data.check_activation;\r\n        that.propagate = network.data.check_propagation;\r\n      }\r\n    }\r\n\r\n    this.optimized = network;\r\n    this.activate = network.activate;\r\n    this.propagate = network.propagate;\r\n  },\r\n\r\n  // restores all the values from the optimized network the their respective objects in order to manipulate the network\r\n  restore: function() {\r\n    if (!this.optimized)\r\n      return;\r\n\r\n    var optimized = this.optimized;\r\n\r\n    var getValue = function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n\r\n      var unit = args.shift();\r\n      var prop = args.pop();\r\n\r\n      var id = prop + '_';\r\n      for (var property in args)\r\n        id += args[property] + '_';\r\n      id += unit.ID;\r\n\r\n      var memory = optimized.memory;\r\n      var variables = optimized.data.variables;\r\n\r\n      if (id in variables)\r\n        return memory[variables[id].id];\r\n      return 0;\r\n    }\r\n\r\n    var list = this.neurons();\r\n\r\n    // link id's to positions in the array\r\n    for (var i = 0; i < list.length; i++) {\r\n      var neuron = list[i].neuron;\r\n      while (neuron.neuron)\r\n        neuron = neuron.neuron;\r\n\r\n      neuron.state = getValue(neuron, 'state');\r\n      neuron.old = getValue(neuron, 'old');\r\n      neuron.activation = getValue(neuron, 'activation');\r\n      neuron.bias = getValue(neuron, 'bias');\r\n\r\n      for (var input in neuron.trace.elegibility)\r\n        neuron.trace.elegibility[input] = getValue(neuron, 'trace',\r\n          'elegibility', input);\r\n\r\n      for (var gated in neuron.trace.extended)\r\n        for (var input in neuron.trace.extended[gated])\r\n          neuron.trace.extended[gated][input] = getValue(neuron, 'trace',\r\n            'extended', gated, input);\r\n\r\n      // get connections\r\n      for (var j in neuron.connections.projected) {\r\n        var connection = neuron.connections.projected[j];\r\n        connection.weight = getValue(connection, 'weight');\r\n        connection.gain = getValue(connection, 'gain');\r\n      }\r\n    }\r\n  },\r\n\r\n  // returns all the neurons in the network\r\n  neurons: function() {\r\n    var neurons = [];\r\n\r\n    var inputLayer = this.layers.input.neurons(),\r\n      outputLayer = this.layers.output.neurons();\r\n\r\n    for (var i = 0; i < inputLayer.length; i++) {\r\n      neurons.push({\r\n        neuron: inputLayer[i],\r\n        layer: 'input'\r\n      });\r\n    }\r\n\r\n    for (var i = 0; i < this.layers.hidden.length; i++) {\r\n      var hiddenLayer = this.layers.hidden[i].neurons();\r\n      for (var j = 0; j < hiddenLayer.length; j++)\r\n        neurons.push({\r\n          neuron: hiddenLayer[j],\r\n          layer: i\r\n        });\r\n    }\r\n\r\n    for (var i = 0; i < outputLayer.length; i++) {\r\n      neurons.push({\r\n        neuron: outputLayer[i],\r\n        layer: 'output'\r\n      });\r\n    }\r\n\r\n    return neurons;\r\n  },\r\n\r\n  // returns number of inputs of the network\r\n  inputs: function() {\r\n    return this.layers.input.size;\r\n  },\r\n\r\n  // returns number of outputs of hte network\r\n  outputs: function() {\r\n    return this.layers.output.size;\r\n  },\r\n\r\n  // sets the layers of the network\r\n  set: function(layers) {\r\n    this.layers = {\r\n      input:  layers.input || null,\r\n      hidden: layers.hidden || [],\r\n      output: layers.output || null\r\n    };\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n  },\r\n\r\n  setOptimize: function(bool){\r\n    this.restore();\r\n    if (this.optimized)\r\n      this.optimized.reset();\r\n    this.optimized = bool? null : false;\r\n  },\r\n\r\n  // returns a json that represents all the neurons and connections of the network\r\n  toJSON: function(ignoreTraces) {\r\n    this.restore();\r\n\r\n    var list = this.neurons();\r\n    var neurons = [];\r\n    var connections = [];\r\n\r\n    // link id's to positions in the array\r\n    var ids = {};\r\n    for (var i = 0; i < list.length; i++) {\r\n      var neuron = list[i].neuron;\r\n      while (neuron.neuron)\r\n        neuron = neuron.neuron;\r\n      ids[neuron.ID] = i;\r\n\r\n      var copy = {\r\n        trace: {\r\n          elegibility: {},\r\n          extended: {}\r\n        },\r\n        state: neuron.state,\r\n        old: neuron.old,\r\n        activation: neuron.activation,\r\n        bias: neuron.bias,\r\n        layer: list[i].layer\r\n      };\r\n\r\n      copy.squash = neuron.squash == Neuron.squash.LOGISTIC ? \"LOGISTIC\" :\r\n        neuron.squash == Neuron.squash.TANH ? \"TANH\" :\r\n        neuron.squash == Neuron.squash.IDENTITY ? \"IDENTITY\" :\r\n        neuron.squash == Neuron.squash.HLIM ? \"HLIM\" :\r\n        neuron.squash == Neuron.squash.RELU ? \"RELU\" :\r\n        null;\r\n\r\n      neurons.push(copy);\r\n    }\r\n\r\n    for(var i = 0; i < list.length; i++){\r\n      var neuron = list[i].neuron;\r\n      while (neuron.neuron)\r\n        neuron = neuron.neuron;\r\n\r\n      for (var j in neuron.connections.projected) {\r\n        var connection = neuron.connections.projected[j];\r\n        connections.push({\r\n          from: ids[connection.from.ID],\r\n          to: ids[connection.to.ID],\r\n          weight: connection.weight,\r\n          gater: connection.gater ? ids[connection.gater.ID] : null,\r\n        });\r\n      }\r\n      if (neuron.selfconnected()) {\r\n        connections.push({\r\n          from: ids[neuron.ID],\r\n          to: ids[neuron.ID],\r\n          weight: neuron.selfconnection.weight,\r\n          gater: neuron.selfconnection.gater ? ids[neuron.selfconnection.gater.ID] : null,\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      neurons: neurons,\r\n      connections: connections\r\n    }\r\n  },\r\n\r\n  // export the topology into dot language which can be visualized as graphs using dot\r\n  /* example: ... console.log(net.toDotLang());\r\n              $ node example.js > example.dot\r\n              $ dot example.dot -Tpng > out.png\r\n  */\r\n  toDot: function(edgeConnection) {\r\n    if (! typeof edgeConnection)\r\n      edgeConnection = false;\r\n    var code = \"digraph nn {\\n    rankdir = BT\\n\";\r\n    var layers = [this.layers.input].concat(this.layers.hidden, this.layers.output);\r\n    for (var i = 0; i < layers.length; i++) {\r\n      for (var j = 0; j < layers[i].connectedTo.length; j++) { // projections\r\n        var connection = layers[i].connectedTo[j];\r\n        var layerTo = connection.to;\r\n        var size = connection.size;\r\n        var layerID = layers.indexOf(layers[i]);\r\n        var layerToID = layers.indexOf(layerTo);\r\n        /* http://stackoverflow.com/questions/26845540/connect-edges-with-graph-dot\r\n         * DOT does not support edge-to-edge connections\r\n         * This workaround produces somewhat weird graphs ...\r\n        */\r\n        if ( edgeConnection) {\r\n          if (connection.gatedfrom.length) {\r\n            var fakeNode = \"fake\" + layerID + \"_\" + layerToID;\r\n            code += \"    \" + fakeNode +\r\n              \" [label = \\\"\\\", shape = point, width = 0.01, height = 0.01]\\n\";\r\n            code += \"    \" + layerID + \" -> \" + fakeNode + \" [label = \" + size + \", arrowhead = none]\\n\";\r\n            code += \"    \" + fakeNode + \" -> \" + layerToID + \"\\n\";\r\n          } else\r\n            code += \"    \" + layerID + \" -> \" + layerToID + \" [label = \" + size + \"]\\n\";\r\n          for (var from in connection.gatedfrom) { // gatings\r\n            var layerfrom = connection.gatedfrom[from].layer;\r\n            var layerfromID = layers.indexOf(layerfrom);\r\n            code += \"    \" + layerfromID + \" -> \" + fakeNode + \" [color = blue]\\n\";\r\n          }\r\n        } else {\r\n          code += \"    \" + layerID + \" -> \" + layerToID + \" [label = \" + size + \"]\\n\";\r\n          for (var from in connection.gatedfrom) { // gatings\r\n            var layerfrom = connection.gatedfrom[from].layer;\r\n            var layerfromID = layers.indexOf(layerfrom);\r\n            code += \"    \" + layerfromID + \" -> \" + layerToID + \" [color = blue]\\n\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n    code += \"}\\n\";\r\n    return {\r\n      code: code,\r\n      link: \"https://chart.googleapis.com/chart?chl=\" + escape(code.replace(\"/ /g\", \"+\")) + \"&cht=gv\"\r\n    }\r\n  },\r\n\r\n  // returns a function that works as the activation of the network and can be used without depending on the library\r\n  standalone: function() {\r\n    if (!this.optimized)\r\n      this.optimize();\r\n\r\n    var data = this.optimized.data;\r\n\r\n    // build activation function\r\n    var activation = \"function (input) {\\n\";\r\n\r\n    // build inputs\r\n    for (var i = 0; i < data.inputs; i++)\r\n      activation += \"F[\" + data.inputs[i] + \"] = input[\" + i + \"];\\n\";\r\n\r\n    // build network activation\r\n    for (var i = 0; i < data.activate.length; i++) { // shouldn't this be layer?\r\n      for (var j = 0; j <  data.activate[i].length; j++)\r\n        activation += data.activate[i][j].join('') + \"\\n\";\r\n    }\r\n\r\n    // build outputs\r\n    activation += \"var output = [];\\n\";\r\n    for (var i = 0; i < data.outputs.length; i++)\r\n      activation += \"output[\" + i + \"] = F[\" + data.outputs[i] + \"];\\n\";\r\n    activation += \"return output;\\n}\";\r\n\r\n    // reference all the positions in memory\r\n    var memory = activation.match(/F\\[(\\d+)\\]/g);\r\n    var dimension = 0;\r\n    var ids = {};\r\n\r\n    for (var i = 0; i < memory.length; i++) {\r\n      var tmp = memory[i].match(/\\d+/)[0];\r\n      if (!(tmp in ids)) {\r\n        ids[tmp] = dimension++;\r\n      }\r\n    }\r\n    var hardcode = \"F = {\\n\";\r\n\r\n    for (var i in ids)\r\n      hardcode += ids[i] + \": \" + this.optimized.memory[i] + \",\\n\";\r\n    hardcode = hardcode.substring(0, hardcode.length - 2) + \"\\n};\\n\";\r\n    hardcode = \"var run = \" + activation.replace(/F\\[(\\d+)]/g, function(\r\n      index) {\r\n      return 'F[' + ids[index.match(/\\d+/)[0]] + ']'\r\n    }).replace(\"{\\n\", \"{\\n\" + hardcode + \"\") + \";\\n\";\r\n    hardcode += \"return run\";\r\n\r\n    // return standalone function\r\n    return new Function(hardcode)();\r\n  },\r\n\r\n\r\n  // Return a HTML5 WebWorker specialized on training the network stored in `memory`.\r\n  // Train based on the given dataSet and options.\r\n  // The worker returns the updated `memory` when done.\r\n  worker: function(memory, set, options) {\r\n\r\n    // Copy the options and set defaults (options might be different for each worker)\r\n    var workerOptions = {};\r\n    if(options) workerOptions = options;\r\n    workerOptions.rate = options.rate || .2;\r\n    workerOptions.iterations = options.iterations || 100000;\r\n    workerOptions.error = options.error || .005;\r\n    workerOptions.cost = options.cost || null;\r\n    workerOptions.crossValidate = options.crossValidate || null;\r\n\r\n    // Cost function might be different for each worker\r\n    costFunction = \"var cost = \" + (options && options.cost || this.cost || Trainer.cost.MSE) + \";\\n\";\r\n    var workerFunction = Network.getWorkerSharedFunctions();\r\n    workerFunction = workerFunction.replace(/var cost = options && options\\.cost \\|\\| this\\.cost \\|\\| Trainer\\.cost\\.MSE;/g, costFunction);\r\n\r\n    // Set what we do when training is finished\r\n    workerFunction = workerFunction.replace('return results;',\r\n                      'postMessage({action: \"done\", message: results, memoryBuffer: F}, [F.buffer]);');\r\n\r\n    // Replace log with postmessage\r\n    workerFunction = workerFunction.replace(\"console.log('iterations', iterations, 'error', error, 'rate', currentRate)\",\r\n              \"postMessage({action: 'log', message: {\\n\" +\r\n                  \"iterations: iterations,\\n\" +\r\n                  \"error: error,\\n\" +\r\n                  \"rate: currentRate\\n\" +\r\n                \"}\\n\" +\r\n              \"})\");\r\n\r\n    // Replace schedule with postmessage\r\n    workerFunction = workerFunction.replace(\"abort = this.schedule.do({ error: error, iterations: iterations, rate: currentRate })\",\r\n              \"postMessage({action: 'schedule', message: {\\n\" +\r\n                  \"iterations: iterations,\\n\" +\r\n                  \"error: error,\\n\" +\r\n                  \"rate: currentRate\\n\" +\r\n                \"}\\n\" +\r\n              \"})\");\r\n\r\n    if (!this.optimized)\r\n      this.optimize();\r\n\r\n    var hardcode = \"var inputs = \" + this.optimized.data.inputs.length + \";\\n\";\r\n    hardcode += \"var outputs = \" + this.optimized.data.outputs.length + \";\\n\";\r\n    hardcode += \"var F =  new Float64Array([\" + this.optimized.memory.toString() + \"]);\\n\";\r\n    hardcode += \"var activate = \" + this.optimized.activate.toString() + \";\\n\";\r\n    hardcode += \"var propagate = \" + this.optimized.propagate.toString() + \";\\n\";\r\n    hardcode +=\r\n        \"onmessage = function(e) {\\n\" +\r\n          \"if (e.data.action == 'startTraining') {\\n\" +\r\n            \"train(\" + JSON.stringify(set) + \",\" + JSON.stringify(workerOptions) + \");\\n\" +\r\n          \"}\\n\" +\r\n        \"}\";\r\n\r\n    var workerSourceCode = workerFunction + '\\n' + hardcode;\r\n    var blob = new Blob([workerSourceCode]);\r\n    var blobURL = window.URL.createObjectURL(blob);\r\n\r\n    return new Worker(blobURL);\r\n  },\r\n\r\n  // returns a copy of the network\r\n  clone: function() {\r\n    return Network.fromJSON(this.toJSON());\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a static String to store the source code of the functions\r\n *  that are identical for all the workers (train, _trainSet, test)\r\n *\r\n * @return {String} Source code that can train a network inside a worker.\r\n * @static\r\n */\r\nNetwork.getWorkerSharedFunctions = function() {\r\n  // If we already computed the source code for the shared functions\r\n  if(typeof Network._SHARED_WORKER_FUNCTIONS !== 'undefined')\r\n    return Network._SHARED_WORKER_FUNCTIONS;\r\n\r\n  // Otherwise compute and return the source code\r\n  // We compute them by simply copying the source code of the train, _trainSet and test functions\r\n  //  using the .toString() method\r\n\r\n  // Load and name the train function\r\n  var train_f = Trainer.prototype.train.toString();\r\n  train_f = train_f.replace('function (set', 'function train(set') + '\\n';\r\n\r\n  // Load and name the _trainSet function\r\n  var _trainSet_f = Trainer.prototype._trainSet.toString().replace(/this.network./g, '');\r\n  _trainSet_f = _trainSet_f.replace('function (set', 'function _trainSet(set') + '\\n';\r\n  _trainSet_f = _trainSet_f.replace('this.crossValidate', 'crossValidate');\r\n  _trainSet_f = _trainSet_f.replace('crossValidate = true', 'crossValidate = { }');\r\n\r\n  // Load and name the test function\r\n  var test_f = Trainer.prototype.test.toString().replace(/this.network./g, '');\r\n  test_f = test_f.replace('function (set', 'function test(set') + '\\n';\r\n\r\n  return Network._SHARED_WORKER_FUNCTIONS = train_f + _trainSet_f + test_f;\r\n};\r\n\r\n// rebuild a network that has been stored in a json using the method toJSON()\r\nNetwork.fromJSON = function(json) {\r\n  var neurons = [];\r\n\r\n  var layers = {\r\n    input: new Layer(),\r\n    hidden: [],\r\n    output: new Layer()\r\n  };\r\n\r\n  for (var i = 0; i < json.neurons.length; i++) {\r\n    var config = json.neurons[i];\r\n\r\n    var neuron = new Neuron();\r\n    neuron.trace.elegibility = {};\r\n    neuron.trace.extended = {};\r\n    neuron.state = config.state;\r\n    neuron.old = config.old;\r\n    neuron.activation = config.activation;\r\n    neuron.bias = config.bias;\r\n    neuron.squash = config.squash in Neuron.squash ? Neuron.squash[config.squash] : Neuron.squash.LOGISTIC;\r\n    neurons.push(neuron);\r\n\r\n    if (config.layer == 'input')\r\n      layers.input.add(neuron);\r\n    else if (config.layer == 'output')\r\n      layers.output.add(neuron);\r\n    else {\r\n      if (typeof layers.hidden[config.layer] == 'undefined')\r\n        layers.hidden[config.layer] = new Layer();\r\n      layers.hidden[config.layer].add(neuron);\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < json.connections.length; i++) {\r\n    var config = json.connections[i];\r\n    var from = neurons[config.from];\r\n    var to = neurons[config.to];\r\n    var weight = config.weight;\r\n    var gater = neurons[config.gater];\r\n\r\n    var connection = from.project(to, weight);\r\n    if (gater)\r\n      gater.gate(connection);\r\n  }\r\n\r\n  return new Network(layers);\r\n};\r\n\r\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)(module)))\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {// export\r\nif (module) module.exports = Trainer;\r\n\r\n/*******************************************************************************************\r\n                                        TRAINER\r\n*******************************************************************************************/\r\n\r\n//+ Jonas Raoni Soares Silva\r\n//@ http://jsfromhell.com/array/shuffle [v1.0]\r\nfunction shuffleInplace(o) { //v1.0\r\n  for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\r\n  return o;\r\n};\r\n\r\nfunction Trainer(network, options) {\r\n  options = options || {};\r\n  this.network = network;\r\n  this.rate = options.rate || .2;\r\n  this.iterations = options.iterations || 100000;\r\n  this.error = options.error || .005;\r\n  this.cost = options.cost || null;\r\n  this.crossValidate = options.crossValidate || null;\r\n}\r\n\r\nTrainer.prototype = {\r\n\r\n  // trains any given set to a network\r\n  train: function(set, options) {\r\n    var error = 1;\r\n    var iterations = bucketSize = 0;\r\n    var abort = false;\r\n    var currentRate;\r\n    var cost = options && options.cost || this.cost || Trainer.cost.MSE;\r\n    var crossValidate = false, testSet, trainSet;\r\n\r\n    var start = Date.now();\r\n\r\n    if (options) {\r\n      if (options.iterations)\r\n        this.iterations = options.iterations;\r\n      if (options.error)\r\n        this.error = options.error;\r\n      if (options.rate)\r\n        this.rate = options.rate;\r\n      if (options.cost)\r\n        this.cost = options.cost;\r\n      if (options.schedule)\r\n        this.schedule = options.schedule;\r\n      if (options.customLog){\r\n        // for backward compatibility with code that used customLog\r\n        console.log('Deprecated: use schedule instead of customLog')\r\n        this.schedule = options.customLog;\r\n      }\r\n      if (this.crossValidate || options.crossValidate) {\r\n        if(!this.crossValidate) this.crossValidate = {};\r\n        crossValidate = true;\r\n        if (options.crossValidate.testSize)\r\n          this.crossValidate.testSize = options.crossValidate.testSize;\r\n        if (options.crossValidate.testError)\r\n          this.crossValidate.testError = options.crossValidate.testError;\r\n      }\r\n    }\r\n\r\n    currentRate = this.rate;\r\n    if(Array.isArray(this.rate)) {\r\n      var bucketSize = Math.floor(this.iterations / this.rate.length);\r\n    }\r\n\r\n    if(crossValidate) {\r\n      var numTrain = Math.ceil((1 - this.crossValidate.testSize) * set.length);\r\n      trainSet = set.slice(0, numTrain);\r\n      testSet = set.slice(numTrain);\r\n    }\r\n\r\n    var lastError = 0;\r\n    while ((!abort && iterations < this.iterations && error > this.error)) {\r\n      if (crossValidate && error <= this.crossValidate.testError) {\r\n        break;\r\n      }\r\n\r\n      var currentSetSize = set.length;\r\n      error = 0;\r\n      iterations++;\r\n\r\n      if(bucketSize > 0) {\r\n        var currentBucket = Math.floor(iterations / bucketSize);\r\n        currentRate = this.rate[currentBucket] || currentRate;\r\n      }\r\n\r\n      if(typeof this.rate === 'function') {\r\n        currentRate = this.rate(iterations, lastError);\r\n      }\r\n\r\n      if (crossValidate) {\r\n        this._trainSet(trainSet, currentRate, cost);\r\n        error += this.test(testSet).error;\r\n        currentSetSize = 1;\r\n      } else {\r\n        error += this._trainSet(set, currentRate, cost);\r\n        currentSetSize = set.length;\r\n      }\r\n\r\n      // check error\r\n      error /= currentSetSize;\r\n      lastError = error;\r\n\r\n      if (options) {\r\n        if (this.schedule && this.schedule.every && iterations %\r\n          this.schedule.every == 0)\r\n          abort = this.schedule.do({ error: error, iterations: iterations, rate: currentRate });\r\n        else if (options.log && iterations % options.log == 0) {\r\n          console.log('iterations', iterations, 'error', error, 'rate', currentRate);\r\n        };\r\n        if (options.shuffle)\r\n          shuffleInplace(set);\r\n      }\r\n    }\r\n\r\n    var results = {\r\n      error: error,\r\n      iterations: iterations,\r\n      time: Date.now() - start\r\n    };\r\n\r\n    return results;\r\n  },\r\n\r\n  // trains any given set to a network, using a WebWorker (only for the browser). Returns a Promise of the results.\r\n  trainAsync: function(set, options) {\r\n    var train = this.workerTrain.bind(this);\r\n    return new Promise(function(resolve, reject) {\r\n      try {\r\n        train(set, resolve, options, true)\r\n      } catch(e) {\r\n        reject(e)\r\n      }\r\n    })\r\n  },\r\n\r\n  // preforms one training epoch and returns the error (private function used in this.train)\r\n  _trainSet: function(set, currentRate, costFunction) {\r\n    var errorSum = 0;\r\n    for (var i = 0; i < set.length; i++) {\r\n      var input = set[i].input;\r\n      var target = set[i].output;\r\n\r\n      var output = this.network.activate(input);\r\n      this.network.propagate(currentRate, target);\r\n\r\n      errorSum += costFunction(target, output);\r\n    }\r\n    return errorSum;\r\n  },\r\n\r\n  // tests a set and returns the error and elapsed time\r\n  test: function(set, options) {\r\n    var error = 0;\r\n    var input, output, target;\r\n    var cost = options && options.cost || this.cost || Trainer.cost.MSE;\r\n\r\n    var start = Date.now();\r\n\r\n    for (var i = 0; i < set.length; i++) {\r\n      input = set[i].input;\r\n      target = set[i].output;\r\n      output = this.network.activate(input);\r\n      error += cost(target, output);\r\n    }\r\n\r\n    error /= set.length;\r\n\r\n    var results = {\r\n      error: error,\r\n      time: Date.now() - start\r\n    };\r\n\r\n    return results;\r\n  },\r\n\r\n  // trains any given set to a network using a WebWorker [deprecated: use trainAsync instead]\r\n  workerTrain: function(set, callback, options, suppressWarning) {\r\n    if (!suppressWarning) {\r\n      console.warn('Deprecated: do not use `workerTrain`, use `trainAsync` instead.')\r\n    }\r\n    var that = this;\r\n\r\n    if (!this.network.optimized)\r\n      this.network.optimize();\r\n\r\n    // Create a new worker\r\n    var worker = this.network.worker(this.network.optimized.memory, set, options);\r\n\r\n    // train the worker\r\n    worker.onmessage = function(e) {\r\n      switch(e.data.action) {\r\n          case 'done':\r\n            var iterations = e.data.message.iterations;\r\n            var error = e.data.message.error;\r\n            var time = e.data.message.time;\r\n\r\n            that.network.optimized.ownership(e.data.memoryBuffer);\r\n\r\n            // Done callback\r\n            callback({\r\n              error: error,\r\n              iterations: iterations,\r\n              time: time\r\n            });\r\n\r\n            // Delete the worker and all its associated memory\r\n            worker.terminate();\r\n          break;\r\n\r\n          case 'log':\r\n            console.log(e.data.message);\r\n\r\n          case 'schedule':\r\n            if (options && options.schedule && typeof options.schedule.do === 'function') {\r\n              var scheduled = options.schedule.do\r\n              scheduled(e.data.message)\r\n            }\r\n          break;\r\n      }\r\n    };\r\n\r\n    // Start the worker\r\n    worker.postMessage({action: 'startTraining'});\r\n  },\r\n\r\n  // trains an XOR to the network\r\n  XOR: function(options) {\r\n    if (this.network.inputs() != 2 || this.network.outputs() != 1)\r\n      throw new Error(\"Incompatible network (2 inputs, 1 output)\");\r\n\r\n    var defaults = {\r\n      iterations: 100000,\r\n      log: false,\r\n      shuffle: true,\r\n      cost: Trainer.cost.MSE\r\n    };\r\n\r\n    if (options)\r\n      for (var i in options)\r\n        defaults[i] = options[i];\r\n\r\n    return this.train([{\r\n      input: [0, 0],\r\n      output: [0]\r\n    }, {\r\n      input: [1, 0],\r\n      output: [1]\r\n    }, {\r\n      input: [0, 1],\r\n      output: [1]\r\n    }, {\r\n      input: [1, 1],\r\n      output: [0]\r\n    }], defaults);\r\n  },\r\n\r\n  // trains the network to pass a Distracted Sequence Recall test\r\n  DSR: function(options) {\r\n    options = options || {};\r\n\r\n    var targets = options.targets || [2, 4, 7, 8];\r\n    var distractors = options.distractors || [3, 5, 6, 9];\r\n    var prompts = options.prompts || [0, 1];\r\n    var length = options.length || 24;\r\n    var criterion = options.success || 0.95;\r\n    var iterations = options.iterations || 100000;\r\n    var rate = options.rate || .1;\r\n    var log = options.log || 0;\r\n    var schedule = options.schedule || {};\r\n    var cost = options.cost || this.cost || Trainer.cost.CROSS_ENTROPY;\r\n\r\n    var trial, correct, i, j, success;\r\n    trial = correct = i = j = success = 0;\r\n    var error = 1,\r\n      symbols = targets.length + distractors.length + prompts.length;\r\n\r\n    var noRepeat = function(range, avoid) {\r\n      var number = Math.random() * range | 0;\r\n      var used = false;\r\n      for (var i in avoid)\r\n        if (number == avoid[i])\r\n          used = true;\r\n      return used ? noRepeat(range, avoid) : number;\r\n    };\r\n\r\n    var equal = function(prediction, output) {\r\n      for (var i in prediction)\r\n        if (Math.round(prediction[i]) != output[i])\r\n          return false;\r\n      return true;\r\n    };\r\n\r\n    var start = Date.now();\r\n\r\n    while (trial < iterations && (success < criterion || trial % 1000 != 0)) {\r\n      // generate sequence\r\n      var sequence = [],\r\n        sequenceLength = length - prompts.length;\r\n      for (i = 0; i < sequenceLength; i++) {\r\n        var any = Math.random() * distractors.length | 0;\r\n        sequence.push(distractors[any]);\r\n      }\r\n      var indexes = [],\r\n        positions = [];\r\n      for (i = 0; i < prompts.length; i++) {\r\n        indexes.push(Math.random() * targets.length | 0);\r\n        positions.push(noRepeat(sequenceLength, positions));\r\n      }\r\n      positions = positions.sort();\r\n      for (i = 0; i < prompts.length; i++) {\r\n        sequence[positions[i]] = targets[indexes[i]];\r\n        sequence.push(prompts[i]);\r\n      }\r\n\r\n      //train sequence\r\n      var distractorsCorrect;\r\n      var targetsCorrect = distractorsCorrect = 0;\r\n      error = 0;\r\n      for (i = 0; i < length; i++) {\r\n        // generate input from sequence\r\n        var input = [];\r\n        for (j = 0; j < symbols; j++)\r\n          input[j] = 0;\r\n        input[sequence[i]] = 1;\r\n\r\n        // generate target output\r\n        var output = [];\r\n        for (j = 0; j < targets.length; j++)\r\n          output[j] = 0;\r\n\r\n        if (i >= sequenceLength) {\r\n          var index = i - sequenceLength;\r\n          output[indexes[index]] = 1;\r\n        }\r\n\r\n        // check result\r\n        var prediction = this.network.activate(input);\r\n\r\n        if (equal(prediction, output))\r\n          if (i < sequenceLength)\r\n            distractorsCorrect++;\r\n          else\r\n            targetsCorrect++;\r\n        else {\r\n          this.network.propagate(rate, output);\r\n        }\r\n\r\n        error += cost(output, prediction);\r\n\r\n        if (distractorsCorrect + targetsCorrect == length)\r\n          correct++;\r\n      }\r\n\r\n      // calculate error\r\n      if (trial % 1000 == 0)\r\n        correct = 0;\r\n      trial++;\r\n      var divideError = trial % 1000;\r\n      divideError = divideError == 0 ? 1000 : divideError;\r\n      success = correct / divideError;\r\n      error /= length;\r\n\r\n      // log\r\n      if (log && trial % log == 0)\r\n        console.log(\"iterations:\", trial, \" success:\", success, \" correct:\",\r\n          correct, \" time:\", Date.now() - start, \" error:\", error);\r\n      if (schedule.do && schedule.every && trial % schedule.every == 0)\r\n        schedule.do({\r\n          iterations: trial,\r\n          success: success,\r\n          error: error,\r\n          time: Date.now() - start,\r\n          correct: correct\r\n        });\r\n    }\r\n\r\n    return {\r\n      iterations: trial,\r\n      success: success,\r\n      error: error,\r\n      time: Date.now() - start\r\n    }\r\n  },\r\n\r\n  // train the network to learn an Embeded Reber Grammar\r\n  ERG: function(options) {\r\n\r\n    options = options || {};\r\n    var iterations = options.iterations || 150000;\r\n    var criterion = options.error || .05;\r\n    var rate = options.rate || .1;\r\n    var log = options.log || 500;\r\n    var cost = options.cost || this.cost || Trainer.cost.CROSS_ENTROPY;\r\n\r\n    // gramar node\r\n    var Node = function() {\r\n      this.paths = [];\r\n    };\r\n    Node.prototype = {\r\n      connect: function(node, value) {\r\n        this.paths.push({\r\n          node: node,\r\n          value: value\r\n        });\r\n        return this;\r\n      },\r\n      any: function() {\r\n        if (this.paths.length == 0)\r\n          return false;\r\n        var index = Math.random() * this.paths.length | 0;\r\n        return this.paths[index];\r\n      },\r\n      test: function(value) {\r\n        for (var i in this.paths)\r\n          if (this.paths[i].value == value)\r\n            return this.paths[i];\r\n        return false;\r\n      }\r\n    };\r\n\r\n    var reberGrammar = function() {\r\n\r\n      // build a reber grammar\r\n      var output = new Node();\r\n      var n1 = (new Node()).connect(output, \"E\");\r\n      var n2 = (new Node()).connect(n1, \"S\");\r\n      var n3 = (new Node()).connect(n1, \"V\").connect(n2, \"P\");\r\n      var n4 = (new Node()).connect(n2, \"X\");\r\n      n4.connect(n4, \"S\");\r\n      var n5 = (new Node()).connect(n3, \"V\");\r\n      n5.connect(n5, \"T\");\r\n      n2.connect(n5, \"X\");\r\n      var n6 = (new Node()).connect(n4, \"T\").connect(n5, \"P\");\r\n      var input = (new Node()).connect(n6, \"B\");\r\n\r\n      return {\r\n        input: input,\r\n        output: output\r\n      }\r\n    };\r\n\r\n    // build an embeded reber grammar\r\n    var embededReberGrammar = function() {\r\n      var reber1 = reberGrammar();\r\n      var reber2 = reberGrammar();\r\n\r\n      var output = new Node();\r\n      var n1 = (new Node).connect(output, \"E\");\r\n      reber1.output.connect(n1, \"T\");\r\n      reber2.output.connect(n1, \"P\");\r\n      var n2 = (new Node).connect(reber1.input, \"P\").connect(reber2.input,\r\n        \"T\");\r\n      var input = (new Node).connect(n2, \"B\");\r\n\r\n      return {\r\n        input: input,\r\n        output: output\r\n      }\r\n\r\n    };\r\n\r\n    // generate an ERG sequence\r\n    var generate = function() {\r\n      var node = embededReberGrammar().input;\r\n      var next = node.any();\r\n      var str = \"\";\r\n      while (next) {\r\n        str += next.value;\r\n        next = next.node.any();\r\n      }\r\n      return str;\r\n    };\r\n\r\n    // test if a string matches an embeded reber grammar\r\n    var test = function(str) {\r\n      var node = embededReberGrammar().input;\r\n      var i = 0;\r\n      var ch = str.charAt(i);\r\n      while (i < str.length) {\r\n        var next = node.test(ch);\r\n        if (!next)\r\n          return false;\r\n        node = next.node;\r\n        ch = str.charAt(++i);\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // helper to check if the output and the target vectors match\r\n    var different = function(array1, array2) {\r\n      var max1 = 0;\r\n      var i1 = -1;\r\n      var max2 = 0;\r\n      var i2 = -1;\r\n      for (var i in array1) {\r\n        if (array1[i] > max1) {\r\n          max1 = array1[i];\r\n          i1 = i;\r\n        }\r\n        if (array2[i] > max2) {\r\n          max2 = array2[i];\r\n          i2 = i;\r\n        }\r\n      }\r\n\r\n      return i1 != i2;\r\n    };\r\n\r\n    var iteration = 0;\r\n    var error = 1;\r\n    var table = {\r\n      \"B\": 0,\r\n      \"P\": 1,\r\n      \"T\": 2,\r\n      \"X\": 3,\r\n      \"S\": 4,\r\n      \"E\": 5\r\n    };\r\n\r\n    var start = Date.now();\r\n    while (iteration < iterations && error > criterion) {\r\n      var i = 0;\r\n      error = 0;\r\n\r\n      // ERG sequence to learn\r\n      var sequence = generate();\r\n\r\n      // input\r\n      var read = sequence.charAt(i);\r\n      // target\r\n      var predict = sequence.charAt(i + 1);\r\n\r\n      // train\r\n      while (i < sequence.length - 1) {\r\n        var input = [];\r\n        var target = [];\r\n        for (var j = 0; j < 6; j++) {\r\n          input[j] = 0;\r\n          target[j] = 0;\r\n        }\r\n        input[table[read]] = 1;\r\n        target[table[predict]] = 1;\r\n\r\n        var output = this.network.activate(input);\r\n\r\n        if (different(output, target))\r\n          this.network.propagate(rate, target);\r\n\r\n        read = sequence.charAt(++i);\r\n        predict = sequence.charAt(i + 1);\r\n\r\n        error += cost(target, output);\r\n      }\r\n      error /= sequence.length;\r\n      iteration++;\r\n      if (iteration % log == 0) {\r\n        console.log(\"iterations:\", iteration, \" time:\", Date.now() - start,\r\n          \" error:\", error);\r\n      }\r\n    }\r\n\r\n    return {\r\n      iterations: iteration,\r\n      error: error,\r\n      time: Date.now() - start,\r\n      test: test,\r\n      generate: generate\r\n    }\r\n  },\r\n\r\n  timingTask: function(options){\r\n\r\n    if (this.network.inputs() != 2 || this.network.outputs() != 1)\r\n      throw new Error(\"Invalid Network: must have 2 inputs and one output\");\r\n\r\n    if (typeof options == 'undefined')\r\n      options = {};\r\n\r\n    // helper\r\n    function getSamples (trainingSize, testSize){\r\n\r\n      // sample size\r\n      var size = trainingSize + testSize;\r\n\r\n      // generate samples\r\n      var t = 0;\r\n      var set = [];\r\n      for (var i = 0; i < size; i++) {\r\n        set.push({ input: [0,0], output: [0] });\r\n      }\r\n      while(t < size - 20) {\r\n          var n = Math.round(Math.random() * 20);\r\n          set[t].input[0] = 1;\r\n          for (var j = t; j <= t + n; j++){\r\n              set[j].input[1] = n / 20;\r\n              set[j].output[0] = 0.5;\r\n          }\r\n          t += n;\r\n          n = Math.round(Math.random() * 20);\r\n          for (var k = t+1; k <= (t + n) &&  k < size; k++)\r\n              set[k].input[1] = set[t].input[1];\r\n          t += n;\r\n      }\r\n\r\n      // separate samples between train and test sets\r\n      var trainingSet = []; var testSet = [];\r\n      for (var l = 0; l < size; l++)\r\n          (l < trainingSize ? trainingSet : testSet).push(set[l]);\r\n\r\n      // return samples\r\n      return {\r\n          train: trainingSet,\r\n          test: testSet\r\n      }\r\n    }\r\n\r\n    var iterations = options.iterations || 200;\r\n    var error = options.error || .005;\r\n    var rate = options.rate || [.03, .02];\r\n    var log = options.log === false ? false : options.log || 10;\r\n    var cost = options.cost || this.cost || Trainer.cost.MSE;\r\n    var trainingSamples = options.trainSamples || 7000;\r\n    var testSamples = options.trainSamples || 1000;\r\n\r\n    // samples for training and testing\r\n    var samples = getSamples(trainingSamples, testSamples);\r\n\r\n    // train\r\n    var result = this.train(samples.train, {\r\n      rate: rate,\r\n      log: log,\r\n      iterations: iterations,\r\n      error: error,\r\n      cost: cost\r\n    });\r\n\r\n    return {\r\n      train: result,\r\n      test: this.test(samples.test)\r\n    }\r\n  }\r\n};\r\n\r\n// Built-in cost functions\r\nTrainer.cost = {\r\n  // Eq. 9\r\n  CROSS_ENTROPY: function(target, output)\r\n  {\r\n    var crossentropy = 0;\r\n    for (var i in output)\r\n      crossentropy -= (target[i] * Math.log(output[i]+1e-15)) + ((1-target[i]) * Math.log((1+1e-15)-output[i])); // +1e-15 is a tiny push away to avoid Math.log(0)\r\n    return crossentropy;\r\n  },\r\n  MSE: function(target, output)\r\n  {\r\n    var mse = 0;\r\n    for (var i = 0; i < output.length; i++)\r\n      mse += Math.pow(target[i] - output[i], 2);\r\n    return mse / output.length;\r\n  },\r\n  BINARY: function(target, output){\r\n    var misses = 0;\r\n    for (var i = 0; i < output.length; i++)\r\n      misses += Math.round(target[i] * 2) != Math.round(output[i] * 2);\r\n    return misses;\r\n  }\r\n}\r\n\r\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)(module)))\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _synaptic = __webpack_require__(6);\r\n\r\nvar inputLayer = new _synaptic.Layer(2);\r\nvar hiddenLayer = new _synaptic.Layer(3);\r\nvar outputLayer = new _synaptic.Layer(1);\r\n\r\ninputLayer.project(hiddenLayer);\r\nhiddenLayer.project(outputLayer);\r\n\r\nvar myNANDNetwork = new _synaptic.Network({\r\n    input: inputLayer,\r\n    hidden: [hiddenLayer],\r\n    output: outputLayer\r\n});\r\n\r\nvar myXORNetwork = new _synaptic.Network({\r\n    input: inputLayer,\r\n    hidden: [hiddenLayer],\r\n    output: outputLayer\r\n});\r\n\r\nvar myORNetwork = new _synaptic.Network({\r\n    input: inputLayer,\r\n    hidden: [hiddenLayer],\r\n    output: outputLayer\r\n});\r\n\r\nvar myANDNetwork = new _synaptic.Network({\r\n    input: inputLayer,\r\n    hidden: [hiddenLayer],\r\n    output: outputLayer\r\n});\r\n\r\nvar learningRate = .3;\r\n\r\nfunction initializeTrainNANDNetwork(myNANDNetwork) {\r\n\r\n    for (var i = 0; i < 20000; i++) {\r\n        // 0,0 => 0\r\n        myNANDNetwork.activate([0, 0]);\r\n        myNANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 0,1 => 0\r\n        myNANDNetwork.activate([0, 1]);\r\n        myNANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 1,0 => 0\r\n        myNANDNetwork.activate([1, 0]);\r\n        myNANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 1,1 => 1\r\n        myNANDNetwork.activate([1, 1]);\r\n        myNANDNetwork.propagate(learningRate, [1]);\r\n    }\r\n}\r\n\r\nfunction initializeTrainXORNetwork(myXORNetwork) {\r\n\r\n    for (var i = 0; i < 20000; i++) {\r\n        // 0,0 => 0\r\n        myXORNetwork.activate([0, 0]);\r\n        myXORNetwork.propagate(learningRate, [0]);\r\n\r\n        // 0,1 => 0\r\n        myXORNetwork.activate([0, 1]);\r\n        myXORNetwork.propagate(learningRate, [1]);\r\n\r\n        // 1,0 => 0\r\n        myXORNetwork.activate([1, 0]);\r\n        myXORNetwork.propagate(learningRate, [1]);\r\n\r\n        // 1,1 => 1\r\n        myXORNetwork.activate([1, 1]);\r\n        myXORNetwork.propagate(learningRate, [0]);\r\n    }\r\n}\r\n\r\nfunction initializeTrainORNetwork(myORNetwork) {\r\n\r\n    for (var i = 0; i < 20000; i++) {\r\n        // 0,0 => 0\r\n        myORNetwork.activate([0, 0]);\r\n        myORNetwork.propagate(learningRate, [0]);\r\n\r\n        // 0,1 => 0\r\n        myORNetwork.activate([0, 1]);\r\n        myORNetwork.propagate(learningRate, [1]);\r\n\r\n        // 1,0 => 0\r\n        myORNetwork.activate([1, 0]);\r\n        myORNetwork.propagate(learningRate, [1]);\r\n\r\n        // 1,1 => 1\r\n        myORNetwork.activate([1, 1]);\r\n        myORNetwork.propagate(learningRate, [0]);\r\n    }\r\n}\r\n\r\nfunction initializeTrainANDNetwork(myANDNetwork) {\r\n\r\n    for (var i = 0; i < 20000; i++) {\r\n        // 0,0 => 0\r\n        myANDNetwork.activate([0, 0]);\r\n        myANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 0,1 => 0\r\n        myANDNetwork.activate([0, 1]);\r\n        myANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 1,0 => 0\r\n        myANDNetwork.activate([1, 0]);\r\n        myANDNetwork.propagate(learningRate, [0]);\r\n\r\n        // 1,1 => 1\r\n        myANDNetwork.activate([1, 1]);\r\n        myANDNetwork.propagate(learningRate, [1]);\r\n    }\r\n}\r\n\r\nfunction fillTable(network, table) {\r\n    for (var i = 0; i < 2; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            createTruthTable(i, j, network, table);\r\n        }\r\n    }\r\n}\r\n\r\nfunction createTruthTable(i, j, network, table) {\r\n    var tr = document.createElement(\"tr\");\r\n    var th1 = document.createElement(\"th\");\r\n    var th2 = th1.cloneNode(true);\r\n    var th3 = th1.cloneNode(true);\r\n    th3.setAttribute(\"colspan\", \"2\");\r\n    th3.style.textAlign = \"center\";\r\n    var text1 = document.createTextNode(\"\" + i);\r\n    var text2 = document.createTextNode(\"\" + j);\r\n    var text3 = document.createTextNode(\"\" + Math.round(network.activate([i, j])));\r\n    th1.appendChild(text1);\r\n    th2.appendChild(text2);\r\n    th3.appendChild(text3);\r\n\r\n    tr.appendChild(th1);\r\n    tr.appendChild(th2);\r\n    tr.appendChild(th3);\r\n    document.getElementById(table).appendChild(tr);\r\n}\r\n\r\ninitializeTrainNANDNetwork(myNANDNetwork);\r\nfillTable(myNANDNetwork, \"nandTable\");\r\n\r\ninitializeTrainXORNetwork(myXORNetwork);\r\nfillTable(myXORNetwork, \"xorTable\");\r\n\r\ninitializeTrainORNetwork(myORNetwork);\r\nfillTable(myORNetwork, \"orTable\");\r\n\r\ninitializeTrainANDNetwork(myANDNetwork);\r\nfillTable(myANDNetwork, \"andTable\");\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var Synaptic = {\r\n    Neuron: __webpack_require__(1),\r\n    Layer: __webpack_require__(2),\r\n    Network: __webpack_require__(3),\r\n    Trainer: __webpack_require__(4),\r\n    Architect: __webpack_require__(7)\r\n};\r\n\r\n// CommonJS & AMD\r\nif (true)\r\n{\r\n  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){ return Synaptic }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\r\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\r\n// Node.js\r\nif (typeof module !== 'undefined' && module.exports)\r\n{\r\n  module.exports = Synaptic;\r\n}\r\n\r\n// Browser\r\nif (typeof window == 'object')\r\n{\r\n  (function(){\r\n    var oldSynaptic = window['synaptic'];\r\n    Synaptic.ninja = function(){\r\n      window['synaptic'] = oldSynaptic;\r\n      return Synaptic;\r\n    };\r\n  })();\r\n\r\n  window['synaptic'] = Synaptic;\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {// import\r\nvar Layer   = __webpack_require__(2)\r\n,   Network = __webpack_require__(3)\r\n,   Trainer = __webpack_require__(4)\r\n\r\n/*******************************************************************************************\r\n                                        ARCHITECT\r\n*******************************************************************************************/\r\n\r\n// Collection of useful built-in architectures\r\nvar Architect = {\r\n\r\n  // Multilayer Perceptron\r\n  Perceptron: function Perceptron() {\r\n    var args = Array.prototype.slice.call(arguments); // convert arguments to Array\r\n    if (args.length < 3)\r\n      throw new Error(\"not enough layers (minimum 3) !!\");\r\n\r\n    var inputs = args.shift(); // first argument\r\n    var outputs = args.pop(); // last argument\r\n    var layers = args; // all the arguments in the middle\r\n\r\n    var input = new Layer(inputs);\r\n    var hidden = [];\r\n    var output = new Layer(outputs);\r\n\r\n    var previous = input;\r\n\r\n    // generate hidden layers\r\n    for (var i = 0; i < layers.length; i++) {\r\n      var size = layers[i];\r\n      var layer = new Layer(size);\r\n      hidden.push(layer);\r\n      previous.project(layer);\r\n      previous = layer;\r\n    }\r\n    previous.project(output);\r\n\r\n    // set layers of the neural network\r\n    this.set({\r\n      input: input,\r\n      hidden: hidden,\r\n      output: output\r\n    });\r\n  },\r\n\r\n  // Multilayer Long Short-Term Memory\r\n  LSTM: function LSTM() {\r\n    var args = Array.prototype.slice.call(arguments); // convert arguments to array\r\n    if (args.length < 3)\r\n      throw new Error(\"not enough layers (minimum 3) !!\");\r\n\r\n    var last = args.pop();\r\n    var option = {\r\n      peepholes: Layer.connectionType.ALL_TO_ALL,\r\n      hiddenToHidden: false,\r\n      outputToHidden: false,\r\n      outputToGates: false,\r\n      inputToOutput: true,\r\n    };\r\n    if (typeof last != 'number') {\r\n      var outputs = args.pop();\r\n      if (last.hasOwnProperty('peepholes'))\r\n        option.peepholes = last.peepholes;\r\n      if (last.hasOwnProperty('hiddenToHidden'))\r\n        option.hiddenToHidden = last.hiddenToHidden;\r\n      if (last.hasOwnProperty('outputToHidden'))\r\n        option.outputToHidden = last.outputToHidden;\r\n      if (last.hasOwnProperty('outputToGates'))\r\n        option.outputToGates = last.outputToGates;\r\n      if (last.hasOwnProperty('inputToOutput'))\r\n        option.inputToOutput = last.inputToOutput;\r\n    } else {\r\n      var outputs = last;\r\n    }\r\n\r\n    var inputs = args.shift();\r\n    var layers = args;\r\n\r\n    var inputLayer = new Layer(inputs);\r\n    var hiddenLayers = [];\r\n    var outputLayer = new Layer(outputs);\r\n\r\n    var previous = null;\r\n\r\n    // generate layers\r\n    for (var i = 0; i < layers.length; i++) {\r\n      // generate memory blocks (memory cell and respective gates)\r\n      var size = layers[i];\r\n\r\n      var inputGate = new Layer(size).set({\r\n        bias: 1\r\n      });\r\n      var forgetGate = new Layer(size).set({\r\n        bias: 1\r\n      });\r\n      var memoryCell = new Layer(size);\r\n      var outputGate = new Layer(size).set({\r\n        bias: 1\r\n      });\r\n\r\n      hiddenLayers.push(inputGate);\r\n      hiddenLayers.push(forgetGate);\r\n      hiddenLayers.push(memoryCell);\r\n      hiddenLayers.push(outputGate);\r\n\r\n      // connections from input layer\r\n      var input = inputLayer.project(memoryCell);\r\n      inputLayer.project(inputGate);\r\n      inputLayer.project(forgetGate);\r\n      inputLayer.project(outputGate);\r\n\r\n      // connections from previous memory-block layer to this one\r\n      if (previous != null) {\r\n        var cell = previous.project(memoryCell);\r\n        previous.project(inputGate);\r\n        previous.project(forgetGate);\r\n        previous.project(outputGate);\r\n      }\r\n\r\n      // connections from memory cell\r\n      var output = memoryCell.project(outputLayer);\r\n\r\n      // self-connection\r\n      var self = memoryCell.project(memoryCell);\r\n\r\n      // hidden to hidden recurrent connection\r\n      if (option.hiddenToHidden)\r\n        memoryCell.project(memoryCell, Layer.connectionType.ALL_TO_ELSE);\r\n\r\n      // out to hidden recurrent connection\r\n      if (option.outputToHidden)\r\n        outputLayer.project(memoryCell);\r\n\r\n      // out to gates recurrent connection\r\n      if (option.outputToGates) {\r\n        outputLayer.project(inputGate);\r\n        outputLayer.project(outputGate);\r\n        outputLayer.project(forgetGate);\r\n      }\r\n\r\n      // peepholes\r\n      memoryCell.project(inputGate, option.peepholes);\r\n      memoryCell.project(forgetGate, option.peepholes);\r\n      memoryCell.project(outputGate, option.peepholes);\r\n\r\n      // gates\r\n      inputGate.gate(input, Layer.gateType.INPUT);\r\n      forgetGate.gate(self, Layer.gateType.ONE_TO_ONE);\r\n      outputGate.gate(output, Layer.gateType.OUTPUT);\r\n      if (previous != null)\r\n        inputGate.gate(cell, Layer.gateType.INPUT);\r\n\r\n      previous = memoryCell;\r\n    }\r\n\r\n    // input to output direct connection\r\n    if (option.inputToOutput)\r\n      inputLayer.project(outputLayer);\r\n\r\n    // set the layers of the neural network\r\n    this.set({\r\n      input: inputLayer,\r\n      hidden: hiddenLayers,\r\n      output: outputLayer\r\n    });\r\n  },\r\n\r\n  // Liquid State Machine\r\n  Liquid: function Liquid(inputs, hidden, outputs, connections, gates) {\r\n    // create layers\r\n    var inputLayer = new Layer(inputs);\r\n    var hiddenLayer = new Layer(hidden);\r\n    var outputLayer = new Layer(outputs);\r\n\r\n    // make connections and gates randomly among the neurons\r\n    var neurons = hiddenLayer.neurons();\r\n    var connectionList = [];\r\n\r\n    for (var i = 0; i < connections; i++) {\r\n      // connect two random neurons\r\n      var from = Math.random() * neurons.length | 0;\r\n      var to = Math.random() * neurons.length | 0;\r\n      var connection = neurons[from].project(neurons[to]);\r\n      connectionList.push(connection);\r\n    }\r\n\r\n    for (var j = 0; j < gates; j++) {\r\n      // pick a random gater neuron\r\n      var gater = Math.random() * neurons.length | 0;\r\n      // pick a random connection to gate\r\n      var connection = Math.random() * connectionList.length | 0;\r\n      // let the gater gate the connection\r\n      neurons[gater].gate(connectionList[connection]);\r\n    }\r\n\r\n    // connect the layers\r\n    inputLayer.project(hiddenLayer);\r\n    hiddenLayer.project(outputLayer);\r\n\r\n    // set the layers of the network\r\n    this.set({\r\n      input: inputLayer,\r\n      hidden: [hiddenLayer],\r\n      output: outputLayer\r\n    });\r\n  },\r\n\r\n  Hopfield: function Hopfield(size) {\r\n    var inputLayer = new Layer(size);\r\n    var outputLayer = new Layer(size);\r\n\r\n    inputLayer.project(outputLayer, Layer.connectionType.ALL_TO_ALL);\r\n\r\n    this.set({\r\n      input: inputLayer,\r\n      hidden: [],\r\n      output: outputLayer\r\n    });\r\n\r\n    var trainer = new Trainer(this);\r\n\r\n    var proto = Architect.Hopfield.prototype;\r\n\r\n    proto.learn = proto.learn || function(patterns)\r\n    {\r\n      var set = [];\r\n      for (var p in patterns)\r\n        set.push({\r\n          input: patterns[p],\r\n          output: patterns[p]\r\n        });\r\n\r\n      return trainer.train(set, {\r\n        iterations: 500000,\r\n        error: .00005,\r\n        rate: 1\r\n      });\r\n    };\r\n\r\n    proto.feed = proto.feed || function(pattern)\r\n    {\r\n      var output = this.activate(pattern);\r\n\r\n      var pattern = [];\r\n      for (var i in output)\r\n        pattern[i] = output[i] > .5 ? 1 : 0;\r\n\r\n      return pattern;\r\n    }\r\n  }\r\n}\r\n\r\n// Extend prototype chain (so every architectures is an instance of Network)\r\nfor (var architecture in Architect) {\r\n  Architect[architecture].prototype = new Network();\r\n  Architect[architecture].prototype.constructor = Architect[architecture];\r\n}\r\n\r\n// export\r\nif (module) module.exports = Architect;\r\n\r\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)(module)))\r\n\r\n/***/ })\r\n/******/ ]);"]}